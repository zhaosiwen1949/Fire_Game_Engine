// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ImageSprite.serializer.h"

#include <algorithm>

#include "once.h"
#include "coded_stream.h"
#include "wire_format_lite_inl.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

void protobuf_ShutdownFile_ImageSprite_2eproto() {
  delete ImageSprite::default_instance_;
  delete ImageSprite9::default_instance_;
}

void protobuf_AddDesc_ImageSprite_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ImageSprite::default_instance_ = new ImageSprite();
  ImageSprite9::default_instance_ = new ImageSprite9();
  ImageSprite::default_instance_->InitAsDefaultInstance();
  ImageSprite9::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ImageSprite_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ImageSprite_2eproto {
  StaticDescriptorInitializer_ImageSprite_2eproto() {
    protobuf_AddDesc_ImageSprite_2eproto();
  }
} static_descriptor_initializer_ImageSprite_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ImageSprite::kImagePathFieldNumber;
const int ImageSprite::kSpriteNameFieldNumber;
const int ImageSprite::kSizeFieldNumber;
const int ImageSprite::kColorFieldNumber;
const int ImageSprite::kLightColorFieldNumber;
const int ImageSprite::kDarkColorFieldNumber;
const int ImageSprite::kBlendFuncSrcFieldNumber;
const int ImageSprite::kBlendFuncDstFieldNumber;
#endif  // !_MSC_VER

ImageSprite::ImageSprite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ImageSprite::InitAsDefaultInstance() {
}

ImageSprite::ImageSprite(const ImageSprite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ImageSprite::SharedCtor() {
  _cached_size_ = 0;
  image_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sprite_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blend_func_src_ = 0;
  blend_func_dst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageSprite::~ImageSprite() {
  SharedDtor();
}

void ImageSprite::SharedDtor() {
  if (image_path_ != &::google::protobuf::internal::kEmptyString) {
    delete image_path_;
  }
  if (sprite_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sprite_name_;
  }
  if (this != default_instance_) {
  }
}

void ImageSprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageSprite& ImageSprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ImageSprite_2eproto();  return *default_instance_;
}

ImageSprite* ImageSprite::default_instance_ = NULL;

ImageSprite* ImageSprite::New() const {
  return new ImageSprite;
}

void ImageSprite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image_path()) {
      if (image_path_ != &::google::protobuf::internal::kEmptyString) {
        image_path_->clear();
      }
    }
    if (has_sprite_name()) {
      if (sprite_name_ != &::google::protobuf::internal::kEmptyString) {
        sprite_name_->clear();
      }
    }
    blend_func_src_ = 0;
    blend_func_dst_ = 0;
  }
  size_.Clear();
  color_.Clear();
  light_color_.Clear();
  dark_color_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ImageSprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sprite_name;
        break;
      }
      
      // optional string sprite_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sprite_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sprite_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_size;
        break;
      }
      
      // repeated float size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_size())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_size())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_size;
        if (input->ExpectTag(37)) goto parse_color;
        break;
      }
      
      // repeated float color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_color;
        if (input->ExpectTag(45)) goto parse_light_color;
        break;
      }
      
      // repeated float light_color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_light_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_light_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_light_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_light_color;
        if (input->ExpectTag(53)) goto parse_dark_color;
        break;
      }
      
      // repeated float dark_color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dark_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_dark_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dark_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_dark_color;
        if (input->ExpectTag(56)) goto parse_blend_func_src;
        break;
      }
      
      // required int32 blend_func_src = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blend_func_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blend_func_src_)));
          set_has_blend_func_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_blend_func_dst;
        break;
      }
      
      // required int32 blend_func_dst = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blend_func_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blend_func_dst_)));
          set_has_blend_func_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageSprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string image_path = 1;
  if (has_image_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->image_path(), output);
  }
  
  // optional string sprite_name = 2;
  if (has_sprite_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sprite_name(), output);
  }
  
  // repeated float size = 3;
  for (int i = 0; i < this->size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->size(i), output);
  }
  
  // repeated float color = 4;
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->color(i), output);
  }
  
  // repeated float light_color = 5;
  for (int i = 0; i < this->light_color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->light_color(i), output);
  }
  
  // repeated float dark_color = 6;
  for (int i = 0; i < this->dark_color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->dark_color(i), output);
  }
  
  // required int32 blend_func_src = 7;
  if (has_blend_func_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->blend_func_src(), output);
  }
  
  // required int32 blend_func_dst = 8;
  if (has_blend_func_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->blend_func_dst(), output);
  }
  
}

int ImageSprite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string image_path = 1;
    if (has_image_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_path());
    }
    
    // optional string sprite_name = 2;
    if (has_sprite_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sprite_name());
    }
    
    // required int32 blend_func_src = 7;
    if (has_blend_func_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blend_func_src());
    }
    
    // required int32 blend_func_dst = 8;
    if (has_blend_func_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blend_func_dst());
    }
    
  }
  // repeated float size = 3;
  {
    int data_size = 0;
    data_size = 4 * this->size_size();
    total_size += 1 * this->size_size() + data_size;
  }
  
  // repeated float color = 4;
  {
    int data_size = 0;
    data_size = 4 * this->color_size();
    total_size += 1 * this->color_size() + data_size;
  }
  
  // repeated float light_color = 5;
  {
    int data_size = 0;
    data_size = 4 * this->light_color_size();
    total_size += 1 * this->light_color_size() + data_size;
  }
  
  // repeated float dark_color = 6;
  {
    int data_size = 0;
    data_size = 4 * this->dark_color_size();
    total_size += 1 * this->dark_color_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageSprite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageSprite*>(&from));
}

void ImageSprite::MergeFrom(const ImageSprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  size_.MergeFrom(from.size_);
  color_.MergeFrom(from.color_);
  light_color_.MergeFrom(from.light_color_);
  dark_color_.MergeFrom(from.dark_color_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_path()) {
      set_image_path(from.image_path());
    }
    if (from.has_sprite_name()) {
      set_sprite_name(from.sprite_name());
    }
    if (from.has_blend_func_src()) {
      set_blend_func_src(from.blend_func_src());
    }
    if (from.has_blend_func_dst()) {
      set_blend_func_dst(from.blend_func_dst());
    }
  }
}

void ImageSprite::CopyFrom(const ImageSprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSprite::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c0) != 0x000000c0) return false;
  
  return true;
}

void ImageSprite::Swap(ImageSprite* other) {
  if (other != this) {
    std::swap(image_path_, other->image_path_);
    std::swap(sprite_name_, other->sprite_name_);
    size_.Swap(&other->size_);
    color_.Swap(&other->color_);
    light_color_.Swap(&other->light_color_);
    dark_color_.Swap(&other->dark_color_);
    std::swap(blend_func_src_, other->blend_func_src_);
    std::swap(blend_func_dst_, other->blend_func_dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ImageSprite::GetTypeName() const {
  return "Serializer.ImageSprite";
}


// ===================================================================

#ifndef _MSC_VER
const int ImageSprite9::kImagePathFieldNumber;
const int ImageSprite9::kSpriteNameFieldNumber;
const int ImageSprite9::kSizeFieldNumber;
const int ImageSprite9::kColorFieldNumber;
const int ImageSprite9::kLightColorFieldNumber;
const int ImageSprite9::kDarkColorFieldNumber;
const int ImageSprite9::kBlendFuncSrcFieldNumber;
const int ImageSprite9::kBlendFuncDstFieldNumber;
const int ImageSprite9::kSplitFieldNumber;
#endif  // !_MSC_VER

ImageSprite9::ImageSprite9()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ImageSprite9::InitAsDefaultInstance() {
}

ImageSprite9::ImageSprite9(const ImageSprite9& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ImageSprite9::SharedCtor() {
  _cached_size_ = 0;
  image_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sprite_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blend_func_src_ = 0;
  blend_func_dst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageSprite9::~ImageSprite9() {
  SharedDtor();
}

void ImageSprite9::SharedDtor() {
  if (image_path_ != &::google::protobuf::internal::kEmptyString) {
    delete image_path_;
  }
  if (sprite_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sprite_name_;
  }
  if (this != default_instance_) {
  }
}

void ImageSprite9::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageSprite9& ImageSprite9::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ImageSprite_2eproto();  return *default_instance_;
}

ImageSprite9* ImageSprite9::default_instance_ = NULL;

ImageSprite9* ImageSprite9::New() const {
  return new ImageSprite9;
}

void ImageSprite9::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image_path()) {
      if (image_path_ != &::google::protobuf::internal::kEmptyString) {
        image_path_->clear();
      }
    }
    if (has_sprite_name()) {
      if (sprite_name_ != &::google::protobuf::internal::kEmptyString) {
        sprite_name_->clear();
      }
    }
    blend_func_src_ = 0;
    blend_func_dst_ = 0;
  }
  size_.Clear();
  color_.Clear();
  light_color_.Clear();
  dark_color_.Clear();
  split_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ImageSprite9::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sprite_name;
        break;
      }
      
      // optional string sprite_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sprite_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sprite_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_size;
        break;
      }
      
      // repeated float size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_size())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_size())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_size;
        if (input->ExpectTag(37)) goto parse_color;
        break;
      }
      
      // repeated float color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_color;
        if (input->ExpectTag(45)) goto parse_light_color;
        break;
      }
      
      // repeated float light_color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_light_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_light_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_light_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_light_color;
        if (input->ExpectTag(53)) goto parse_dark_color;
        break;
      }
      
      // repeated float dark_color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dark_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_dark_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dark_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_dark_color;
        if (input->ExpectTag(56)) goto parse_blend_func_src;
        break;
      }
      
      // required int32 blend_func_src = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blend_func_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blend_func_src_)));
          set_has_blend_func_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_blend_func_dst;
        break;
      }
      
      // required int32 blend_func_dst = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blend_func_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blend_func_dst_)));
          set_has_blend_func_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_split;
        break;
      }
      
      // repeated int32 split = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_split:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_split())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_split())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_split;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageSprite9::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string image_path = 1;
  if (has_image_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->image_path(), output);
  }
  
  // optional string sprite_name = 2;
  if (has_sprite_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sprite_name(), output);
  }
  
  // repeated float size = 3;
  for (int i = 0; i < this->size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->size(i), output);
  }
  
  // repeated float color = 4;
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->color(i), output);
  }
  
  // repeated float light_color = 5;
  for (int i = 0; i < this->light_color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->light_color(i), output);
  }
  
  // repeated float dark_color = 6;
  for (int i = 0; i < this->dark_color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->dark_color(i), output);
  }
  
  // required int32 blend_func_src = 7;
  if (has_blend_func_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->blend_func_src(), output);
  }
  
  // required int32 blend_func_dst = 8;
  if (has_blend_func_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->blend_func_dst(), output);
  }
  
  // repeated int32 split = 9;
  for (int i = 0; i < this->split_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->split(i), output);
  }
  
}

int ImageSprite9::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string image_path = 1;
    if (has_image_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_path());
    }
    
    // optional string sprite_name = 2;
    if (has_sprite_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sprite_name());
    }
    
    // required int32 blend_func_src = 7;
    if (has_blend_func_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blend_func_src());
    }
    
    // required int32 blend_func_dst = 8;
    if (has_blend_func_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blend_func_dst());
    }
    
  }
  // repeated float size = 3;
  {
    int data_size = 0;
    data_size = 4 * this->size_size();
    total_size += 1 * this->size_size() + data_size;
  }
  
  // repeated float color = 4;
  {
    int data_size = 0;
    data_size = 4 * this->color_size();
    total_size += 1 * this->color_size() + data_size;
  }
  
  // repeated float light_color = 5;
  {
    int data_size = 0;
    data_size = 4 * this->light_color_size();
    total_size += 1 * this->light_color_size() + data_size;
  }
  
  // repeated float dark_color = 6;
  {
    int data_size = 0;
    data_size = 4 * this->dark_color_size();
    total_size += 1 * this->dark_color_size() + data_size;
  }
  
  // repeated int32 split = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->split_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->split(i));
    }
    total_size += 1 * this->split_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageSprite9::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageSprite9*>(&from));
}

void ImageSprite9::MergeFrom(const ImageSprite9& from) {
  GOOGLE_CHECK_NE(&from, this);
  size_.MergeFrom(from.size_);
  color_.MergeFrom(from.color_);
  light_color_.MergeFrom(from.light_color_);
  dark_color_.MergeFrom(from.dark_color_);
  split_.MergeFrom(from.split_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_path()) {
      set_image_path(from.image_path());
    }
    if (from.has_sprite_name()) {
      set_sprite_name(from.sprite_name());
    }
    if (from.has_blend_func_src()) {
      set_blend_func_src(from.blend_func_src());
    }
    if (from.has_blend_func_dst()) {
      set_blend_func_dst(from.blend_func_dst());
    }
  }
}

void ImageSprite9::CopyFrom(const ImageSprite9& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSprite9::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c0) != 0x000000c0) return false;
  
  return true;
}

void ImageSprite9::Swap(ImageSprite9* other) {
  if (other != this) {
    std::swap(image_path_, other->image_path_);
    std::swap(sprite_name_, other->sprite_name_);
    size_.Swap(&other->size_);
    color_.Swap(&other->color_);
    light_color_.Swap(&other->light_color_);
    dark_color_.Swap(&other->dark_color_);
    std::swap(blend_func_src_, other->blend_func_src_);
    std::swap(blend_func_dst_, other->blend_func_dst_);
    split_.Swap(&other->split_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ImageSprite9::GetTypeName() const {
  return "Serializer.ImageSprite9";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)
