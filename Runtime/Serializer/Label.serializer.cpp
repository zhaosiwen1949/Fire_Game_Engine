// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Label.serializer.h"

#include <algorithm>

#include "once.h"
#include "coded_stream.h"
#include "wire_format_lite_inl.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

void protobuf_ShutdownFile_Label_2eproto() {
  delete Label::default_instance_;
}

void protobuf_AddDesc_Label_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Serializer::protobuf_AddDesc_Color_2eproto();
  Label::default_instance_ = new Label();
  Label::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Label_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Label_2eproto {
  StaticDescriptorInitializer_Label_2eproto() {
    protobuf_AddDesc_Label_2eproto();
  }
} static_descriptor_initializer_Label_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Label::kTextFieldNumber;
const int Label::kFontFieldNumber;
const int Label::kCharsizeFieldNumber;
const int Label::kStyleFieldNumber;
const int Label::kOutlineSizeFieldNumber;
const int Label::kOutlinecolorFieldNumber;
const int Label::kShadowxFieldNumber;
const int Label::kShadowyFieldNumber;
const int Label::kAligningFieldNumber;
const int Label::kTextColorFieldNumber;
const int Label::kShadowColorFieldNumber;
#endif  // !_MSC_VER

Label::Label()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Label::InitAsDefaultInstance() {
  outlinecolor_ = const_cast< ::Serializer::Color4B*>(&::Serializer::Color4B::default_instance());
  textcolor_ = const_cast< ::Serializer::Color4B*>(&::Serializer::Color4B::default_instance());
  shadowcolor_ = const_cast< ::Serializer::Color4B*>(&::Serializer::Color4B::default_instance());
}

Label::Label(const Label& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Label::SharedCtor() {
  _cached_size_ = 0;
  font_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charsize_ = 0;
  style_ = 0;
  outlinesize_ = 0;
  outlinecolor_ = NULL;
  shadowx_ = 0;
  shadowy_ = 0;
  aligning_ = 0;
  textcolor_ = NULL;
  shadowcolor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Label::~Label() {
  SharedDtor();
}

void Label::SharedDtor() {
  if (font_ != &::google::protobuf::internal::kEmptyString) {
    delete font_;
  }
  if (this != default_instance_) {
    delete outlinecolor_;
    delete textcolor_;
    delete shadowcolor_;
  }
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Label& Label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Label_2eproto();  return *default_instance_;
}

Label* Label::default_instance_ = NULL;

Label* Label::New() const {
  return new Label;
}

void Label::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_font()) {
      if (font_ != &::google::protobuf::internal::kEmptyString) {
        font_->clear();
      }
    }
    charsize_ = 0;
    style_ = 0;
    outlinesize_ = 0;
    if (has_outlinecolor()) {
      if (outlinecolor_ != NULL) outlinecolor_->::Serializer::Color4B::Clear();
    }
    shadowx_ = 0;
    shadowy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    aligning_ = 0;
    if (has_textcolor()) {
      if (textcolor_ != NULL) textcolor_->::Serializer::Color4B::Clear();
    }
    if (has_shadowcolor()) {
      if (shadowcolor_ != NULL) shadowcolor_->::Serializer::Color4B::Clear();
    }
  }
  text_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_text())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_text())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_text;
        if (input->ExpectTag(18)) goto parse_font;
        break;
      }
      
      // optional string font = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charsize;
        break;
      }
      
      // optional int32 charsize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charsize_)));
          set_has_charsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_style;
        break;
      }
      
      // optional int32 style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_outlineSize;
        break;
      }
      
      // optional int32 outlineSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outlineSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outlinesize_)));
          set_has_outlinesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_outlinecolor;
        break;
      }
      
      // optional .Serializer.Color4B outlinecolor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outlinecolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outlinecolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_shadowx;
        break;
      }
      
      // optional int32 shadowx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadowx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shadowx_)));
          set_has_shadowx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_shadowy;
        break;
      }
      
      // optional int32 shadowy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadowy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shadowy_)));
          set_has_shadowy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_aligning;
        break;
      }
      
      // optional int32 aligning = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aligning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aligning_)));
          set_has_aligning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_textColor;
        break;
      }
      
      // optional .Serializer.Color4B textColor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textcolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_shadowColor;
        break;
      }
      
      // optional .Serializer.Color4B shadowColor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadowColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadowcolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 text = 1;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->text(i), output);
  }
  
  // optional string font = 2;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->font(), output);
  }
  
  // optional int32 charsize = 3;
  if (has_charsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->charsize(), output);
  }
  
  // optional int32 style = 4;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->style(), output);
  }
  
  // optional int32 outlineSize = 5;
  if (has_outlinesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->outlinesize(), output);
  }
  
  // optional .Serializer.Color4B outlinecolor = 6;
  if (has_outlinecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->outlinecolor(), output);
  }
  
  // optional int32 shadowx = 7;
  if (has_shadowx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->shadowx(), output);
  }
  
  // optional int32 shadowy = 8;
  if (has_shadowy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->shadowy(), output);
  }
  
  // optional int32 aligning = 9;
  if (has_aligning()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->aligning(), output);
  }
  
  // optional .Serializer.Color4B textColor = 10;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->textcolor(), output);
  }
  
  // optional .Serializer.Color4B shadowColor = 11;
  if (has_shadowcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->shadowcolor(), output);
  }
  
}

int Label::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string font = 2;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font());
    }
    
    // optional int32 charsize = 3;
    if (has_charsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charsize());
    }
    
    // optional int32 style = 4;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }
    
    // optional int32 outlineSize = 5;
    if (has_outlinesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outlinesize());
    }
    
    // optional .Serializer.Color4B outlinecolor = 6;
    if (has_outlinecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outlinecolor());
    }
    
    // optional int32 shadowx = 7;
    if (has_shadowx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shadowx());
    }
    
    // optional int32 shadowy = 8;
    if (has_shadowy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shadowy());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 aligning = 9;
    if (has_aligning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aligning());
    }
    
    // optional .Serializer.Color4B textColor = 10;
    if (has_textcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textcolor());
    }
    
    // optional .Serializer.Color4B shadowColor = 11;
    if (has_shadowcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadowcolor());
    }
    
  }
  // repeated int32 text = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->text_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->text(i));
    }
    total_size += 1 * this->text_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Label*>(&from));
}

void Label::MergeFrom(const Label& from) {
  GOOGLE_CHECK_NE(&from, this);
  text_.MergeFrom(from.text_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_font()) {
      set_font(from.font());
    }
    if (from.has_charsize()) {
      set_charsize(from.charsize());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_outlinesize()) {
      set_outlinesize(from.outlinesize());
    }
    if (from.has_outlinecolor()) {
      mutable_outlinecolor()->::Serializer::Color4B::MergeFrom(from.outlinecolor());
    }
    if (from.has_shadowx()) {
      set_shadowx(from.shadowx());
    }
    if (from.has_shadowy()) {
      set_shadowy(from.shadowy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aligning()) {
      set_aligning(from.aligning());
    }
    if (from.has_textcolor()) {
      mutable_textcolor()->::Serializer::Color4B::MergeFrom(from.textcolor());
    }
    if (from.has_shadowcolor()) {
      mutable_shadowcolor()->::Serializer::Color4B::MergeFrom(from.shadowcolor());
    }
  }
}

void Label::CopyFrom(const Label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  
  if (has_outlinecolor()) {
    if (!this->outlinecolor().IsInitialized()) return false;
  }
  if (has_textcolor()) {
    if (!this->textcolor().IsInitialized()) return false;
  }
  if (has_shadowcolor()) {
    if (!this->shadowcolor().IsInitialized()) return false;
  }
  return true;
}

void Label::Swap(Label* other) {
  if (other != this) {
    text_.Swap(&other->text_);
    std::swap(font_, other->font_);
    std::swap(charsize_, other->charsize_);
    std::swap(style_, other->style_);
    std::swap(outlinesize_, other->outlinesize_);
    std::swap(outlinecolor_, other->outlinecolor_);
    std::swap(shadowx_, other->shadowx_);
    std::swap(shadowy_, other->shadowy_);
    std::swap(aligning_, other->aligning_);
    std::swap(textcolor_, other->textcolor_);
    std::swap(shadowcolor_, other->shadowcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Label::GetTypeName() const {
  return "Serializer.Label";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)
