// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Audio.proto

#ifndef PROTOBUF_Audio_2eproto__INCLUDED
#define PROTOBUF_Audio_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Audio_2eproto();
void protobuf_AssignDesc_Audio_2eproto();
void protobuf_ShutdownFile_Audio_2eproto();

class RuntimeAudioData;

// ===================================================================

class RuntimeAudioData : public ::google::protobuf::MessageLite {
 public:
  RuntimeAudioData();
  virtual ~RuntimeAudioData();
  
  RuntimeAudioData(const RuntimeAudioData& from);
  
  inline RuntimeAudioData& operator=(const RuntimeAudioData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const RuntimeAudioData& default_instance();
  
  void Swap(RuntimeAudioData* other);
  
  // implements Message ----------------------------------------------
  
  RuntimeAudioData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RuntimeAudioData& from);
  void MergeFrom(const RuntimeAudioData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // optional int32 format = 2;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 2;
  inline ::google::protobuf::int32 format() const;
  inline void set_format(::google::protobuf::int32 value);
  
  // optional int32 frequence = 3;
  inline bool has_frequence() const;
  inline void clear_frequence();
  static const int kFrequenceFieldNumber = 3;
  inline ::google::protobuf::int32 frequence() const;
  inline void set_frequence(::google::protobuf::int32 value);
  
  // optional int32 byte_per_sample = 4;
  inline bool has_byte_per_sample() const;
  inline void clear_byte_per_sample();
  static const int kBytePerSampleFieldNumber = 4;
  inline ::google::protobuf::int32 byte_per_sample() const;
  inline void set_byte_per_sample(::google::protobuf::int32 value);
  
  // optional int32 channel_count = 5;
  inline bool has_channel_count() const;
  inline void clear_channel_count();
  static const int kChannelCountFieldNumber = 5;
  inline ::google::protobuf::int32 channel_count() const;
  inline void set_channel_count(::google::protobuf::int32 value);
  
  // optional int32 openal_format = 6;
  inline bool has_openal_format() const;
  inline void clear_openal_format();
  static const int kOpenalFormatFieldNumber = 6;
  inline ::google::protobuf::int32 openal_format() const;
  inline void set_openal_format(::google::protobuf::int32 value);
  
  // optional bytes data = 7;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:Serializer.RuntimeAudioData)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_frequence();
  inline void clear_has_frequence();
  inline void set_has_byte_per_sample();
  inline void clear_has_byte_per_sample();
  inline void set_has_channel_count();
  inline void clear_has_channel_count();
  inline void set_has_openal_format();
  inline void clear_has_openal_format();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::std::string* path_;
  ::google::protobuf::int32 format_;
  ::google::protobuf::int32 frequence_;
  ::google::protobuf::int32 byte_per_sample_;
  ::google::protobuf::int32 channel_count_;
  ::std::string* data_;
  ::google::protobuf::int32 openal_format_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Audio_2eproto();
  friend void protobuf_AssignDesc_Audio_2eproto();
  friend void protobuf_ShutdownFile_Audio_2eproto();
  
  void InitAsDefaultInstance();
  static RuntimeAudioData* default_instance_;
};
// ===================================================================


// ===================================================================

// RuntimeAudioData

// optional string path = 1;
inline bool RuntimeAudioData::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RuntimeAudioData::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RuntimeAudioData::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RuntimeAudioData::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& RuntimeAudioData::path() const {
  return *path_;
}
inline void RuntimeAudioData::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void RuntimeAudioData::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void RuntimeAudioData::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RuntimeAudioData::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* RuntimeAudioData::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 format = 2;
inline bool RuntimeAudioData::has_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RuntimeAudioData::set_has_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RuntimeAudioData::clear_has_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RuntimeAudioData::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::google::protobuf::int32 RuntimeAudioData::format() const {
  return format_;
}
inline void RuntimeAudioData::set_format(::google::protobuf::int32 value) {
  set_has_format();
  format_ = value;
}

// optional int32 frequence = 3;
inline bool RuntimeAudioData::has_frequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RuntimeAudioData::set_has_frequence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RuntimeAudioData::clear_has_frequence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RuntimeAudioData::clear_frequence() {
  frequence_ = 0;
  clear_has_frequence();
}
inline ::google::protobuf::int32 RuntimeAudioData::frequence() const {
  return frequence_;
}
inline void RuntimeAudioData::set_frequence(::google::protobuf::int32 value) {
  set_has_frequence();
  frequence_ = value;
}

// optional int32 byte_per_sample = 4;
inline bool RuntimeAudioData::has_byte_per_sample() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RuntimeAudioData::set_has_byte_per_sample() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RuntimeAudioData::clear_has_byte_per_sample() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RuntimeAudioData::clear_byte_per_sample() {
  byte_per_sample_ = 0;
  clear_has_byte_per_sample();
}
inline ::google::protobuf::int32 RuntimeAudioData::byte_per_sample() const {
  return byte_per_sample_;
}
inline void RuntimeAudioData::set_byte_per_sample(::google::protobuf::int32 value) {
  set_has_byte_per_sample();
  byte_per_sample_ = value;
}

// optional int32 channel_count = 5;
inline bool RuntimeAudioData::has_channel_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RuntimeAudioData::set_has_channel_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RuntimeAudioData::clear_has_channel_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RuntimeAudioData::clear_channel_count() {
  channel_count_ = 0;
  clear_has_channel_count();
}
inline ::google::protobuf::int32 RuntimeAudioData::channel_count() const {
  return channel_count_;
}
inline void RuntimeAudioData::set_channel_count(::google::protobuf::int32 value) {
  set_has_channel_count();
  channel_count_ = value;
}

// optional int32 openal_format = 6;
inline bool RuntimeAudioData::has_openal_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RuntimeAudioData::set_has_openal_format() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RuntimeAudioData::clear_has_openal_format() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RuntimeAudioData::clear_openal_format() {
  openal_format_ = 0;
  clear_has_openal_format();
}
inline ::google::protobuf::int32 RuntimeAudioData::openal_format() const {
  return openal_format_;
}
inline void RuntimeAudioData::set_openal_format(::google::protobuf::int32 value) {
  set_has_openal_format();
  openal_format_ = value;
}

// optional bytes data = 7;
inline bool RuntimeAudioData::has_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RuntimeAudioData::set_has_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RuntimeAudioData::clear_has_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RuntimeAudioData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& RuntimeAudioData::data() const {
  return *data_;
}
inline void RuntimeAudioData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void RuntimeAudioData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void RuntimeAudioData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RuntimeAudioData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* RuntimeAudioData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Audio_2eproto__INCLUDED
