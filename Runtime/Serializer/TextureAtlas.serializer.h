// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TextureAtlas.proto

#ifndef PROTOBUF_TextureAtlas_2eproto__INCLUDED
#define PROTOBUF_TextureAtlas_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
#include "TextureInfo.serializer.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TextureAtlas_2eproto();
void protobuf_AssignDesc_TextureAtlas_2eproto();
void protobuf_ShutdownFile_TextureAtlas_2eproto();

class ImageTile;
class TextureAtlas;
class AtlasInfo;

// ===================================================================

class ImageTile : public ::google::protobuf::MessageLite {
 public:
  ImageTile();
  virtual ~ImageTile();
  
  ImageTile(const ImageTile& from);
  
  inline ImageTile& operator=(const ImageTile& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ImageTile& default_instance();
  
  void Swap(ImageTile* other);
  
  // implements Message ----------------------------------------------
  
  ImageTile* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ImageTile& from);
  void MergeFrom(const ImageTile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional int32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // optional int32 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // optional string textureAtlasPath = 6;
  inline bool has_textureatlaspath() const;
  inline void clear_textureatlaspath();
  static const int kTextureAtlasPathFieldNumber = 6;
  inline const ::std::string& textureatlaspath() const;
  inline void set_textureatlaspath(const ::std::string& value);
  inline void set_textureatlaspath(const char* value);
  inline void set_textureatlaspath(const char* value, size_t size);
  inline ::std::string* mutable_textureatlaspath();
  inline ::std::string* release_textureatlaspath();
  
  // optional float texcoordLeft = 7;
  inline bool has_texcoordleft() const;
  inline void clear_texcoordleft();
  static const int kTexcoordLeftFieldNumber = 7;
  inline float texcoordleft() const;
  inline void set_texcoordleft(float value);
  
  // optional float texcoordTop = 8;
  inline bool has_texcoordtop() const;
  inline void clear_texcoordtop();
  static const int kTexcoordTopFieldNumber = 8;
  inline float texcoordtop() const;
  inline void set_texcoordtop(float value);
  
  // optional float texcoordRight = 9;
  inline bool has_texcoordright() const;
  inline void clear_texcoordright();
  static const int kTexcoordRightFieldNumber = 9;
  inline float texcoordright() const;
  inline void set_texcoordright(float value);
  
  // optional float texcoordBottom = 10;
  inline bool has_texcoordbottom() const;
  inline void clear_texcoordbottom();
  static const int kTexcoordBottomFieldNumber = 10;
  inline float texcoordbottom() const;
  inline void set_texcoordbottom(float value);
  
  // optional bool rotated = 11;
  inline bool has_rotated() const;
  inline void clear_rotated();
  static const int kRotatedFieldNumber = 11;
  inline bool rotated() const;
  inline void set_rotated(bool value);
  
  // @@protoc_insertion_point(class_scope:Serializer.ImageTile)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_textureatlaspath();
  inline void clear_has_textureatlaspath();
  inline void set_has_texcoordleft();
  inline void clear_has_texcoordleft();
  inline void set_has_texcoordtop();
  inline void clear_has_texcoordtop();
  inline void set_has_texcoordright();
  inline void clear_has_texcoordright();
  inline void set_has_texcoordbottom();
  inline void clear_has_texcoordbottom();
  inline void set_has_rotated();
  inline void clear_has_rotated();
  
  ::std::string* name_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::std::string* textureatlaspath_;
  float texcoordleft_;
  float texcoordtop_;
  float texcoordright_;
  float texcoordbottom_;
  bool rotated_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_TextureAtlas_2eproto();
  friend void protobuf_AssignDesc_TextureAtlas_2eproto();
  friend void protobuf_ShutdownFile_TextureAtlas_2eproto();
  
  void InitAsDefaultInstance();
  static ImageTile* default_instance_;
};
// -------------------------------------------------------------------

class TextureAtlas : public ::google::protobuf::MessageLite {
 public:
  TextureAtlas();
  virtual ~TextureAtlas();
  
  TextureAtlas(const TextureAtlas& from);
  
  inline TextureAtlas& operator=(const TextureAtlas& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const TextureAtlas& default_instance();
  
  void Swap(TextureAtlas* other);
  
  // implements Message ----------------------------------------------
  
  TextureAtlas* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TextureAtlas& from);
  void MergeFrom(const TextureAtlas& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // repeated .Serializer.ImageTile imageTiles = 2;
  inline int imagetiles_size() const;
  inline void clear_imagetiles();
  static const int kImageTilesFieldNumber = 2;
  inline const ::Serializer::ImageTile& imagetiles(int index) const;
  inline ::Serializer::ImageTile* mutable_imagetiles(int index);
  inline ::Serializer::ImageTile* add_imagetiles();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >&
      imagetiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >*
      mutable_imagetiles();
  
  // optional .Serializer.TextureInfo textureInfo = 3;
  inline bool has_textureinfo() const;
  inline void clear_textureinfo();
  static const int kTextureInfoFieldNumber = 3;
  inline const ::Serializer::TextureInfo& textureinfo() const;
  inline ::Serializer::TextureInfo* mutable_textureinfo();
  inline ::Serializer::TextureInfo* release_textureinfo();
  
  // optional bool importedAtlas = 4;
  inline bool has_importedatlas() const;
  inline void clear_importedatlas();
  static const int kImportedAtlasFieldNumber = 4;
  inline bool importedatlas() const;
  inline void set_importedatlas(bool value);
  
  // optional string guid = 5;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  
  // @@protoc_insertion_point(class_scope:Serializer.TextureAtlas)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_textureinfo();
  inline void clear_has_textureinfo();
  inline void set_has_importedatlas();
  inline void clear_has_importedatlas();
  inline void set_has_guid();
  inline void clear_has_guid();
  
  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile > imagetiles_;
  ::Serializer::TextureInfo* textureinfo_;
  ::std::string* guid_;
  bool importedatlas_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_TextureAtlas_2eproto();
  friend void protobuf_AssignDesc_TextureAtlas_2eproto();
  friend void protobuf_ShutdownFile_TextureAtlas_2eproto();
  
  void InitAsDefaultInstance();
  static TextureAtlas* default_instance_;
};
// -------------------------------------------------------------------

class AtlasInfo : public ::google::protobuf::MessageLite {
 public:
  AtlasInfo();
  virtual ~AtlasInfo();
  
  AtlasInfo(const AtlasInfo& from);
  
  inline AtlasInfo& operator=(const AtlasInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const AtlasInfo& default_instance();
  
  void Swap(AtlasInfo* other);
  
  // implements Message ----------------------------------------------
  
  AtlasInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AtlasInfo& from);
  void MergeFrom(const AtlasInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // repeated .Serializer.ImageTile imageTiles = 2;
  inline int imagetiles_size() const;
  inline void clear_imagetiles();
  static const int kImageTilesFieldNumber = 2;
  inline const ::Serializer::ImageTile& imagetiles(int index) const;
  inline ::Serializer::ImageTile* mutable_imagetiles(int index);
  inline ::Serializer::ImageTile* add_imagetiles();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >&
      imagetiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >*
      mutable_imagetiles();
  
  // optional bool importedAtlas = 3;
  inline bool has_importedatlas() const;
  inline void clear_importedatlas();
  static const int kImportedAtlasFieldNumber = 3;
  inline bool importedatlas() const;
  inline void set_importedatlas(bool value);
  
  // optional string guid = 4;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 4;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  
  // optional fixed64 last_write_time = 5;
  inline bool has_last_write_time() const;
  inline void clear_last_write_time();
  static const int kLastWriteTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 last_write_time() const;
  inline void set_last_write_time(::google::protobuf::uint64 value);
  
  // optional .Serializer.ImageCompressInfo ios = 6;
  inline bool has_ios() const;
  inline void clear_ios();
  static const int kIosFieldNumber = 6;
  inline const ::Serializer::ImageCompressInfo& ios() const;
  inline ::Serializer::ImageCompressInfo* mutable_ios();
  inline ::Serializer::ImageCompressInfo* release_ios();
  
  // optional .Serializer.ImageCompressInfo android = 7;
  inline bool has_android() const;
  inline void clear_android();
  static const int kAndroidFieldNumber = 7;
  inline const ::Serializer::ImageCompressInfo& android() const;
  inline ::Serializer::ImageCompressInfo* mutable_android();
  inline ::Serializer::ImageCompressInfo* release_android();
  
  // optional .Serializer.ImageCompressInfo windows = 8;
  inline bool has_windows() const;
  inline void clear_windows();
  static const int kWindowsFieldNumber = 8;
  inline const ::Serializer::ImageCompressInfo& windows() const;
  inline ::Serializer::ImageCompressInfo* mutable_windows();
  inline ::Serializer::ImageCompressInfo* release_windows();
  
  // @@protoc_insertion_point(class_scope:Serializer.AtlasInfo)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_importedatlas();
  inline void clear_has_importedatlas();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_last_write_time();
  inline void clear_has_last_write_time();
  inline void set_has_ios();
  inline void clear_has_ios();
  inline void set_has_android();
  inline void clear_has_android();
  inline void set_has_windows();
  inline void clear_has_windows();
  
  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile > imagetiles_;
  ::std::string* guid_;
  ::google::protobuf::uint64 last_write_time_;
  ::Serializer::ImageCompressInfo* ios_;
  ::Serializer::ImageCompressInfo* android_;
  ::Serializer::ImageCompressInfo* windows_;
  bool importedatlas_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_TextureAtlas_2eproto();
  friend void protobuf_AssignDesc_TextureAtlas_2eproto();
  friend void protobuf_ShutdownFile_TextureAtlas_2eproto();
  
  void InitAsDefaultInstance();
  static AtlasInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ImageTile

// optional string name = 1;
inline bool ImageTile::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageTile::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageTile::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageTile::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ImageTile::name() const {
  return *name_;
}
inline void ImageTile::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ImageTile::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ImageTile::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageTile::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ImageTile::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 x = 2;
inline bool ImageTile::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageTile::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageTile::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageTile::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 ImageTile::x() const {
  return x_;
}
inline void ImageTile::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 3;
inline bool ImageTile::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageTile::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageTile::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageTile::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 ImageTile::y() const {
  return y_;
}
inline void ImageTile::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional int32 width = 4;
inline bool ImageTile::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageTile::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageTile::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageTile::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ImageTile::width() const {
  return width_;
}
inline void ImageTile::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 5;
inline bool ImageTile::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageTile::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageTile::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageTile::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ImageTile::height() const {
  return height_;
}
inline void ImageTile::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional string textureAtlasPath = 6;
inline bool ImageTile::has_textureatlaspath() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageTile::set_has_textureatlaspath() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageTile::clear_has_textureatlaspath() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageTile::clear_textureatlaspath() {
  if (textureatlaspath_ != &::google::protobuf::internal::kEmptyString) {
    textureatlaspath_->clear();
  }
  clear_has_textureatlaspath();
}
inline const ::std::string& ImageTile::textureatlaspath() const {
  return *textureatlaspath_;
}
inline void ImageTile::set_textureatlaspath(const ::std::string& value) {
  set_has_textureatlaspath();
  if (textureatlaspath_ == &::google::protobuf::internal::kEmptyString) {
    textureatlaspath_ = new ::std::string;
  }
  textureatlaspath_->assign(value);
}
inline void ImageTile::set_textureatlaspath(const char* value) {
  set_has_textureatlaspath();
  if (textureatlaspath_ == &::google::protobuf::internal::kEmptyString) {
    textureatlaspath_ = new ::std::string;
  }
  textureatlaspath_->assign(value);
}
inline void ImageTile::set_textureatlaspath(const char* value, size_t size) {
  set_has_textureatlaspath();
  if (textureatlaspath_ == &::google::protobuf::internal::kEmptyString) {
    textureatlaspath_ = new ::std::string;
  }
  textureatlaspath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageTile::mutable_textureatlaspath() {
  set_has_textureatlaspath();
  if (textureatlaspath_ == &::google::protobuf::internal::kEmptyString) {
    textureatlaspath_ = new ::std::string;
  }
  return textureatlaspath_;
}
inline ::std::string* ImageTile::release_textureatlaspath() {
  clear_has_textureatlaspath();
  if (textureatlaspath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = textureatlaspath_;
    textureatlaspath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float texcoordLeft = 7;
inline bool ImageTile::has_texcoordleft() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageTile::set_has_texcoordleft() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageTile::clear_has_texcoordleft() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageTile::clear_texcoordleft() {
  texcoordleft_ = 0;
  clear_has_texcoordleft();
}
inline float ImageTile::texcoordleft() const {
  return texcoordleft_;
}
inline void ImageTile::set_texcoordleft(float value) {
  set_has_texcoordleft();
  texcoordleft_ = value;
}

// optional float texcoordTop = 8;
inline bool ImageTile::has_texcoordtop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageTile::set_has_texcoordtop() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageTile::clear_has_texcoordtop() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageTile::clear_texcoordtop() {
  texcoordtop_ = 0;
  clear_has_texcoordtop();
}
inline float ImageTile::texcoordtop() const {
  return texcoordtop_;
}
inline void ImageTile::set_texcoordtop(float value) {
  set_has_texcoordtop();
  texcoordtop_ = value;
}

// optional float texcoordRight = 9;
inline bool ImageTile::has_texcoordright() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageTile::set_has_texcoordright() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageTile::clear_has_texcoordright() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageTile::clear_texcoordright() {
  texcoordright_ = 0;
  clear_has_texcoordright();
}
inline float ImageTile::texcoordright() const {
  return texcoordright_;
}
inline void ImageTile::set_texcoordright(float value) {
  set_has_texcoordright();
  texcoordright_ = value;
}

// optional float texcoordBottom = 10;
inline bool ImageTile::has_texcoordbottom() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageTile::set_has_texcoordbottom() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageTile::clear_has_texcoordbottom() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageTile::clear_texcoordbottom() {
  texcoordbottom_ = 0;
  clear_has_texcoordbottom();
}
inline float ImageTile::texcoordbottom() const {
  return texcoordbottom_;
}
inline void ImageTile::set_texcoordbottom(float value) {
  set_has_texcoordbottom();
  texcoordbottom_ = value;
}

// optional bool rotated = 11;
inline bool ImageTile::has_rotated() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageTile::set_has_rotated() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageTile::clear_has_rotated() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageTile::clear_rotated() {
  rotated_ = false;
  clear_has_rotated();
}
inline bool ImageTile::rotated() const {
  return rotated_;
}
inline void ImageTile::set_rotated(bool value) {
  set_has_rotated();
  rotated_ = value;
}

// -------------------------------------------------------------------

// TextureAtlas

// optional string path = 1;
inline bool TextureAtlas::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TextureAtlas::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TextureAtlas::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TextureAtlas::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& TextureAtlas::path() const {
  return *path_;
}
inline void TextureAtlas::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void TextureAtlas::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void TextureAtlas::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TextureAtlas::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* TextureAtlas::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Serializer.ImageTile imageTiles = 2;
inline int TextureAtlas::imagetiles_size() const {
  return imagetiles_.size();
}
inline void TextureAtlas::clear_imagetiles() {
  imagetiles_.Clear();
}
inline const ::Serializer::ImageTile& TextureAtlas::imagetiles(int index) const {
  return imagetiles_.Get(index);
}
inline ::Serializer::ImageTile* TextureAtlas::mutable_imagetiles(int index) {
  return imagetiles_.Mutable(index);
}
inline ::Serializer::ImageTile* TextureAtlas::add_imagetiles() {
  return imagetiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >&
TextureAtlas::imagetiles() const {
  return imagetiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >*
TextureAtlas::mutable_imagetiles() {
  return &imagetiles_;
}

// optional .Serializer.TextureInfo textureInfo = 3;
inline bool TextureAtlas::has_textureinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TextureAtlas::set_has_textureinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TextureAtlas::clear_has_textureinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TextureAtlas::clear_textureinfo() {
  if (textureinfo_ != NULL) textureinfo_->::Serializer::TextureInfo::Clear();
  clear_has_textureinfo();
}
inline const ::Serializer::TextureInfo& TextureAtlas::textureinfo() const {
  return textureinfo_ != NULL ? *textureinfo_ : *default_instance_->textureinfo_;
}
inline ::Serializer::TextureInfo* TextureAtlas::mutable_textureinfo() {
  set_has_textureinfo();
  if (textureinfo_ == NULL) textureinfo_ = new ::Serializer::TextureInfo;
  return textureinfo_;
}
inline ::Serializer::TextureInfo* TextureAtlas::release_textureinfo() {
  clear_has_textureinfo();
  ::Serializer::TextureInfo* temp = textureinfo_;
  textureinfo_ = NULL;
  return temp;
}

// optional bool importedAtlas = 4;
inline bool TextureAtlas::has_importedatlas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TextureAtlas::set_has_importedatlas() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TextureAtlas::clear_has_importedatlas() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TextureAtlas::clear_importedatlas() {
  importedatlas_ = false;
  clear_has_importedatlas();
}
inline bool TextureAtlas::importedatlas() const {
  return importedatlas_;
}
inline void TextureAtlas::set_importedatlas(bool value) {
  set_has_importedatlas();
  importedatlas_ = value;
}

// optional string guid = 5;
inline bool TextureAtlas::has_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TextureAtlas::set_has_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TextureAtlas::clear_has_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TextureAtlas::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& TextureAtlas::guid() const {
  return *guid_;
}
inline void TextureAtlas::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void TextureAtlas::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void TextureAtlas::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TextureAtlas::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* TextureAtlas::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AtlasInfo

// optional string path = 1;
inline bool AtlasInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AtlasInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AtlasInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AtlasInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& AtlasInfo::path() const {
  return *path_;
}
inline void AtlasInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void AtlasInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void AtlasInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AtlasInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* AtlasInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Serializer.ImageTile imageTiles = 2;
inline int AtlasInfo::imagetiles_size() const {
  return imagetiles_.size();
}
inline void AtlasInfo::clear_imagetiles() {
  imagetiles_.Clear();
}
inline const ::Serializer::ImageTile& AtlasInfo::imagetiles(int index) const {
  return imagetiles_.Get(index);
}
inline ::Serializer::ImageTile* AtlasInfo::mutable_imagetiles(int index) {
  return imagetiles_.Mutable(index);
}
inline ::Serializer::ImageTile* AtlasInfo::add_imagetiles() {
  return imagetiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >&
AtlasInfo::imagetiles() const {
  return imagetiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >*
AtlasInfo::mutable_imagetiles() {
  return &imagetiles_;
}

// optional bool importedAtlas = 3;
inline bool AtlasInfo::has_importedatlas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AtlasInfo::set_has_importedatlas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AtlasInfo::clear_has_importedatlas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AtlasInfo::clear_importedatlas() {
  importedatlas_ = false;
  clear_has_importedatlas();
}
inline bool AtlasInfo::importedatlas() const {
  return importedatlas_;
}
inline void AtlasInfo::set_importedatlas(bool value) {
  set_has_importedatlas();
  importedatlas_ = value;
}

// optional string guid = 4;
inline bool AtlasInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AtlasInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AtlasInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AtlasInfo::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& AtlasInfo::guid() const {
  return *guid_;
}
inline void AtlasInfo::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void AtlasInfo::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void AtlasInfo::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AtlasInfo::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* AtlasInfo::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 last_write_time = 5;
inline bool AtlasInfo::has_last_write_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AtlasInfo::set_has_last_write_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AtlasInfo::clear_has_last_write_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AtlasInfo::clear_last_write_time() {
  last_write_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_write_time();
}
inline ::google::protobuf::uint64 AtlasInfo::last_write_time() const {
  return last_write_time_;
}
inline void AtlasInfo::set_last_write_time(::google::protobuf::uint64 value) {
  set_has_last_write_time();
  last_write_time_ = value;
}

// optional .Serializer.ImageCompressInfo ios = 6;
inline bool AtlasInfo::has_ios() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AtlasInfo::set_has_ios() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AtlasInfo::clear_has_ios() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AtlasInfo::clear_ios() {
  if (ios_ != NULL) ios_->::Serializer::ImageCompressInfo::Clear();
  clear_has_ios();
}
inline const ::Serializer::ImageCompressInfo& AtlasInfo::ios() const {
  return ios_ != NULL ? *ios_ : *default_instance_->ios_;
}
inline ::Serializer::ImageCompressInfo* AtlasInfo::mutable_ios() {
  set_has_ios();
  if (ios_ == NULL) ios_ = new ::Serializer::ImageCompressInfo;
  return ios_;
}
inline ::Serializer::ImageCompressInfo* AtlasInfo::release_ios() {
  clear_has_ios();
  ::Serializer::ImageCompressInfo* temp = ios_;
  ios_ = NULL;
  return temp;
}

// optional .Serializer.ImageCompressInfo android = 7;
inline bool AtlasInfo::has_android() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AtlasInfo::set_has_android() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AtlasInfo::clear_has_android() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AtlasInfo::clear_android() {
  if (android_ != NULL) android_->::Serializer::ImageCompressInfo::Clear();
  clear_has_android();
}
inline const ::Serializer::ImageCompressInfo& AtlasInfo::android() const {
  return android_ != NULL ? *android_ : *default_instance_->android_;
}
inline ::Serializer::ImageCompressInfo* AtlasInfo::mutable_android() {
  set_has_android();
  if (android_ == NULL) android_ = new ::Serializer::ImageCompressInfo;
  return android_;
}
inline ::Serializer::ImageCompressInfo* AtlasInfo::release_android() {
  clear_has_android();
  ::Serializer::ImageCompressInfo* temp = android_;
  android_ = NULL;
  return temp;
}

// optional .Serializer.ImageCompressInfo windows = 8;
inline bool AtlasInfo::has_windows() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AtlasInfo::set_has_windows() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AtlasInfo::clear_has_windows() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AtlasInfo::clear_windows() {
  if (windows_ != NULL) windows_->::Serializer::ImageCompressInfo::Clear();
  clear_has_windows();
}
inline const ::Serializer::ImageCompressInfo& AtlasInfo::windows() const {
  return windows_ != NULL ? *windows_ : *default_instance_->windows_;
}
inline ::Serializer::ImageCompressInfo* AtlasInfo::mutable_windows() {
  set_has_windows();
  if (windows_ == NULL) windows_ = new ::Serializer::ImageCompressInfo;
  return windows_;
}
inline ::Serializer::ImageCompressInfo* AtlasInfo::release_windows() {
  clear_has_windows();
  ::Serializer::ImageCompressInfo* temp = windows_;
  windows_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TextureAtlas_2eproto__INCLUDED
