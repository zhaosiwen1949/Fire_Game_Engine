// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Camera.proto

#ifndef PROTOBUF_Camera_2eproto__INCLUDED
#define PROTOBUF_Camera_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
#include "Color.serializer.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Camera_2eproto();
void protobuf_AssignDesc_Camera_2eproto();
void protobuf_ShutdownFile_Camera_2eproto();

class Camera;

// ===================================================================

class Camera : public ::google::protobuf::MessageLite {
 public:
  Camera();
  virtual ~Camera();
  
  Camera(const Camera& from);
  
  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Camera& default_instance();
  
  void Swap(Camera* other);
  
  // implements Message ----------------------------------------------
  
  Camera* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 projection_mode = 1;
  inline bool has_projection_mode() const;
  inline void clear_projection_mode();
  static const int kProjectionModeFieldNumber = 1;
  inline ::google::protobuf::int32 projection_mode() const;
  inline void set_projection_mode(::google::protobuf::int32 value);
  
  // optional int32 clear_mode = 2;
  inline bool has_clear_mode() const;
  inline void clear_clear_mode();
  static const int kClearModeFieldNumber = 2;
  inline ::google::protobuf::int32 clear_mode() const;
  inline void set_clear_mode(::google::protobuf::int32 value);
  
  // optional float clip_near = 3;
  inline bool has_clip_near() const;
  inline void clear_clip_near();
  static const int kClipNearFieldNumber = 3;
  inline float clip_near() const;
  inline void set_clip_near(float value);
  
  // optional float clip_far = 4;
  inline bool has_clip_far() const;
  inline void clear_clip_far();
  static const int kClipFarFieldNumber = 4;
  inline float clip_far() const;
  inline void set_clip_far(float value);
  
  // optional float depth = 5;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 5;
  inline float depth() const;
  inline void set_depth(float value);
  
  // optional uint32 culling_mask = 6;
  inline bool has_culling_mask() const;
  inline void clear_culling_mask();
  static const int kCullingMaskFieldNumber = 6;
  inline ::google::protobuf::uint32 culling_mask() const;
  inline void set_culling_mask(::google::protobuf::uint32 value);
  
  // optional float orth_mode_size = 7;
  inline bool has_orth_mode_size() const;
  inline void clear_orth_mode_size();
  static const int kOrthModeSizeFieldNumber = 7;
  inline float orth_mode_size() const;
  inline void set_orth_mode_size(float value);
  
  // optional float fov = 8;
  inline bool has_fov() const;
  inline void clear_fov();
  static const int kFovFieldNumber = 8;
  inline float fov() const;
  inline void set_fov(float value);
  
  // optional int32 render_to_depth = 9;
  inline bool has_render_to_depth() const;
  inline void clear_render_to_depth();
  static const int kRenderToDepthFieldNumber = 9;
  inline ::google::protobuf::int32 render_to_depth() const;
  inline void set_render_to_depth(::google::protobuf::int32 value);
  
  // optional int32 render_to_offscreen = 10;
  inline bool has_render_to_offscreen() const;
  inline void clear_render_to_offscreen();
  static const int kRenderToOffscreenFieldNumber = 10;
  inline ::google::protobuf::int32 render_to_offscreen() const;
  inline void set_render_to_offscreen(::google::protobuf::int32 value);
  
  // optional .Serializer.Color4B clear_color = 11;
  inline bool has_clear_color() const;
  inline void clear_clear_color();
  static const int kClearColorFieldNumber = 11;
  inline const ::Serializer::Color4B& clear_color() const;
  inline ::Serializer::Color4B* mutable_clear_color();
  inline ::Serializer::Color4B* release_clear_color();
  
  // optional string skybox = 12;
  inline bool has_skybox() const;
  inline void clear_skybox();
  static const int kSkyboxFieldNumber = 12;
  inline const ::std::string& skybox() const;
  inline void set_skybox(const ::std::string& value);
  inline void set_skybox(const char* value);
  inline void set_skybox(const char* value, size_t size);
  inline ::std::string* mutable_skybox();
  inline ::std::string* release_skybox();
  
  // @@protoc_insertion_point(class_scope:Serializer.Camera)
 private:
  inline void set_has_projection_mode();
  inline void clear_has_projection_mode();
  inline void set_has_clear_mode();
  inline void clear_has_clear_mode();
  inline void set_has_clip_near();
  inline void clear_has_clip_near();
  inline void set_has_clip_far();
  inline void clear_has_clip_far();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_culling_mask();
  inline void clear_has_culling_mask();
  inline void set_has_orth_mode_size();
  inline void clear_has_orth_mode_size();
  inline void set_has_fov();
  inline void clear_has_fov();
  inline void set_has_render_to_depth();
  inline void clear_has_render_to_depth();
  inline void set_has_render_to_offscreen();
  inline void clear_has_render_to_offscreen();
  inline void set_has_clear_color();
  inline void clear_has_clear_color();
  inline void set_has_skybox();
  inline void clear_has_skybox();
  
  ::google::protobuf::int32 projection_mode_;
  ::google::protobuf::int32 clear_mode_;
  float clip_near_;
  float clip_far_;
  float depth_;
  ::google::protobuf::uint32 culling_mask_;
  float orth_mode_size_;
  float fov_;
  ::google::protobuf::int32 render_to_depth_;
  ::google::protobuf::int32 render_to_offscreen_;
  ::Serializer::Color4B* clear_color_;
  ::std::string* skybox_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_Camera_2eproto();
  friend void protobuf_AssignDesc_Camera_2eproto();
  friend void protobuf_ShutdownFile_Camera_2eproto();
  
  void InitAsDefaultInstance();
  static Camera* default_instance_;
};
// ===================================================================


// ===================================================================

// Camera

// optional int32 projection_mode = 1;
inline bool Camera::has_projection_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camera::set_has_projection_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camera::clear_has_projection_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camera::clear_projection_mode() {
  projection_mode_ = 0;
  clear_has_projection_mode();
}
inline ::google::protobuf::int32 Camera::projection_mode() const {
  return projection_mode_;
}
inline void Camera::set_projection_mode(::google::protobuf::int32 value) {
  set_has_projection_mode();
  projection_mode_ = value;
}

// optional int32 clear_mode = 2;
inline bool Camera::has_clear_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Camera::set_has_clear_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Camera::clear_has_clear_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Camera::clear_clear_mode() {
  clear_mode_ = 0;
  clear_has_clear_mode();
}
inline ::google::protobuf::int32 Camera::clear_mode() const {
  return clear_mode_;
}
inline void Camera::set_clear_mode(::google::protobuf::int32 value) {
  set_has_clear_mode();
  clear_mode_ = value;
}

// optional float clip_near = 3;
inline bool Camera::has_clip_near() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Camera::set_has_clip_near() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Camera::clear_has_clip_near() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Camera::clear_clip_near() {
  clip_near_ = 0;
  clear_has_clip_near();
}
inline float Camera::clip_near() const {
  return clip_near_;
}
inline void Camera::set_clip_near(float value) {
  set_has_clip_near();
  clip_near_ = value;
}

// optional float clip_far = 4;
inline bool Camera::has_clip_far() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Camera::set_has_clip_far() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Camera::clear_has_clip_far() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Camera::clear_clip_far() {
  clip_far_ = 0;
  clear_has_clip_far();
}
inline float Camera::clip_far() const {
  return clip_far_;
}
inline void Camera::set_clip_far(float value) {
  set_has_clip_far();
  clip_far_ = value;
}

// optional float depth = 5;
inline bool Camera::has_depth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Camera::set_has_depth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Camera::clear_has_depth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Camera::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline float Camera::depth() const {
  return depth_;
}
inline void Camera::set_depth(float value) {
  set_has_depth();
  depth_ = value;
}

// optional uint32 culling_mask = 6;
inline bool Camera::has_culling_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Camera::set_has_culling_mask() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Camera::clear_has_culling_mask() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Camera::clear_culling_mask() {
  culling_mask_ = 0u;
  clear_has_culling_mask();
}
inline ::google::protobuf::uint32 Camera::culling_mask() const {
  return culling_mask_;
}
inline void Camera::set_culling_mask(::google::protobuf::uint32 value) {
  set_has_culling_mask();
  culling_mask_ = value;
}

// optional float orth_mode_size = 7;
inline bool Camera::has_orth_mode_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Camera::set_has_orth_mode_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Camera::clear_has_orth_mode_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Camera::clear_orth_mode_size() {
  orth_mode_size_ = 0;
  clear_has_orth_mode_size();
}
inline float Camera::orth_mode_size() const {
  return orth_mode_size_;
}
inline void Camera::set_orth_mode_size(float value) {
  set_has_orth_mode_size();
  orth_mode_size_ = value;
}

// optional float fov = 8;
inline bool Camera::has_fov() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Camera::set_has_fov() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Camera::clear_has_fov() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Camera::clear_fov() {
  fov_ = 0;
  clear_has_fov();
}
inline float Camera::fov() const {
  return fov_;
}
inline void Camera::set_fov(float value) {
  set_has_fov();
  fov_ = value;
}

// optional int32 render_to_depth = 9;
inline bool Camera::has_render_to_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Camera::set_has_render_to_depth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Camera::clear_has_render_to_depth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Camera::clear_render_to_depth() {
  render_to_depth_ = 0;
  clear_has_render_to_depth();
}
inline ::google::protobuf::int32 Camera::render_to_depth() const {
  return render_to_depth_;
}
inline void Camera::set_render_to_depth(::google::protobuf::int32 value) {
  set_has_render_to_depth();
  render_to_depth_ = value;
}

// optional int32 render_to_offscreen = 10;
inline bool Camera::has_render_to_offscreen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Camera::set_has_render_to_offscreen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Camera::clear_has_render_to_offscreen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Camera::clear_render_to_offscreen() {
  render_to_offscreen_ = 0;
  clear_has_render_to_offscreen();
}
inline ::google::protobuf::int32 Camera::render_to_offscreen() const {
  return render_to_offscreen_;
}
inline void Camera::set_render_to_offscreen(::google::protobuf::int32 value) {
  set_has_render_to_offscreen();
  render_to_offscreen_ = value;
}

// optional .Serializer.Color4B clear_color = 11;
inline bool Camera::has_clear_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Camera::set_has_clear_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Camera::clear_has_clear_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Camera::clear_clear_color() {
  if (clear_color_ != NULL) clear_color_->::Serializer::Color4B::Clear();
  clear_has_clear_color();
}
inline const ::Serializer::Color4B& Camera::clear_color() const {
  return clear_color_ != NULL ? *clear_color_ : *default_instance_->clear_color_;
}
inline ::Serializer::Color4B* Camera::mutable_clear_color() {
  set_has_clear_color();
  if (clear_color_ == NULL) clear_color_ = new ::Serializer::Color4B;
  return clear_color_;
}
inline ::Serializer::Color4B* Camera::release_clear_color() {
  clear_has_clear_color();
  ::Serializer::Color4B* temp = clear_color_;
  clear_color_ = NULL;
  return temp;
}

// optional string skybox = 12;
inline bool Camera::has_skybox() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Camera::set_has_skybox() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Camera::clear_has_skybox() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Camera::clear_skybox() {
  if (skybox_ != &::google::protobuf::internal::kEmptyString) {
    skybox_->clear();
  }
  clear_has_skybox();
}
inline const ::std::string& Camera::skybox() const {
  return *skybox_;
}
inline void Camera::set_skybox(const ::std::string& value) {
  set_has_skybox();
  if (skybox_ == &::google::protobuf::internal::kEmptyString) {
    skybox_ = new ::std::string;
  }
  skybox_->assign(value);
}
inline void Camera::set_skybox(const char* value) {
  set_has_skybox();
  if (skybox_ == &::google::protobuf::internal::kEmptyString) {
    skybox_ = new ::std::string;
  }
  skybox_->assign(value);
}
inline void Camera::set_skybox(const char* value, size_t size) {
  set_has_skybox();
  if (skybox_ == &::google::protobuf::internal::kEmptyString) {
    skybox_ = new ::std::string;
  }
  skybox_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Camera::mutable_skybox() {
  set_has_skybox();
  if (skybox_ == &::google::protobuf::internal::kEmptyString) {
    skybox_ = new ::std::string;
  }
  return skybox_;
}
inline ::std::string* Camera::release_skybox() {
  clear_has_skybox();
  if (skybox_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skybox_;
    skybox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Camera_2eproto__INCLUDED
