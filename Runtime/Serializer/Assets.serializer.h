// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Assets.proto

#ifndef PROTOBUF_Assets_2eproto__INCLUDED
#define PROTOBUF_Assets_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Assets_2eproto();
void protobuf_AssignDesc_Assets_2eproto();
void protobuf_ShutdownFile_Assets_2eproto();

class RuntimeAsset;

// ===================================================================

class RuntimeAsset : public ::google::protobuf::MessageLite {
 public:
  RuntimeAsset();
  virtual ~RuntimeAsset();
  
  RuntimeAsset(const RuntimeAsset& from);
  
  inline RuntimeAsset& operator=(const RuntimeAsset& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const RuntimeAsset& default_instance();
  
  void Swap(RuntimeAsset* other);
  
  // implements Message ----------------------------------------------
  
  RuntimeAsset* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RuntimeAsset& from);
  void MergeFrom(const RuntimeAsset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required string guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  
  // required bytes rawdata = 3;
  inline bool has_rawdata() const;
  inline void clear_rawdata();
  static const int kRawdataFieldNumber = 3;
  inline const ::std::string& rawdata() const;
  inline void set_rawdata(const ::std::string& value);
  inline void set_rawdata(const char* value);
  inline void set_rawdata(const void* value, size_t size);
  inline ::std::string* mutable_rawdata();
  inline ::std::string* release_rawdata();
  
  // @@protoc_insertion_point(class_scope:Serializer.RuntimeAsset)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_rawdata();
  inline void clear_has_rawdata();
  
  ::std::string* guid_;
  ::std::string* rawdata_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Assets_2eproto();
  friend void protobuf_AssignDesc_Assets_2eproto();
  friend void protobuf_ShutdownFile_Assets_2eproto();
  
  void InitAsDefaultInstance();
  static RuntimeAsset* default_instance_;
};
// ===================================================================


// ===================================================================

// RuntimeAsset

// required int32 type = 1;
inline bool RuntimeAsset::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RuntimeAsset::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RuntimeAsset::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RuntimeAsset::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RuntimeAsset::type() const {
  return type_;
}
inline void RuntimeAsset::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string guid = 2;
inline bool RuntimeAsset::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RuntimeAsset::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RuntimeAsset::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RuntimeAsset::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& RuntimeAsset::guid() const {
  return *guid_;
}
inline void RuntimeAsset::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RuntimeAsset::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void RuntimeAsset::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RuntimeAsset::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* RuntimeAsset::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes rawdata = 3;
inline bool RuntimeAsset::has_rawdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RuntimeAsset::set_has_rawdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RuntimeAsset::clear_has_rawdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RuntimeAsset::clear_rawdata() {
  if (rawdata_ != &::google::protobuf::internal::kEmptyString) {
    rawdata_->clear();
  }
  clear_has_rawdata();
}
inline const ::std::string& RuntimeAsset::rawdata() const {
  return *rawdata_;
}
inline void RuntimeAsset::set_rawdata(const ::std::string& value) {
  set_has_rawdata();
  if (rawdata_ == &::google::protobuf::internal::kEmptyString) {
    rawdata_ = new ::std::string;
  }
  rawdata_->assign(value);
}
inline void RuntimeAsset::set_rawdata(const char* value) {
  set_has_rawdata();
  if (rawdata_ == &::google::protobuf::internal::kEmptyString) {
    rawdata_ = new ::std::string;
  }
  rawdata_->assign(value);
}
inline void RuntimeAsset::set_rawdata(const void* value, size_t size) {
  set_has_rawdata();
  if (rawdata_ == &::google::protobuf::internal::kEmptyString) {
    rawdata_ = new ::std::string;
  }
  rawdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RuntimeAsset::mutable_rawdata() {
  set_has_rawdata();
  if (rawdata_ == &::google::protobuf::internal::kEmptyString) {
    rawdata_ = new ::std::string;
  }
  return rawdata_;
}
inline ::std::string* RuntimeAsset::release_rawdata() {
  clear_has_rawdata();
  if (rawdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rawdata_;
    rawdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Assets_2eproto__INCLUDED
