// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GLSL.serializer.h"

#include <algorithm>

#include "once.h"
#include "coded_stream.h"
#include "wire_format_lite_inl.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

void protobuf_ShutdownFile_GLSL_2eproto() {
  delete UniformDefine::default_instance_;
  delete AttributeDefine::default_instance_;
  delete GLSL::default_instance_;
}

void protobuf_AddDesc_GLSL_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  UniformDefine::default_instance_ = new UniformDefine();
  AttributeDefine::default_instance_ = new AttributeDefine();
  GLSL::default_instance_ = new GLSL();
  UniformDefine::default_instance_->InitAsDefaultInstance();
  AttributeDefine::default_instance_->InitAsDefaultInstance();
  GLSL::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GLSL_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GLSL_2eproto {
  StaticDescriptorInitializer_GLSL_2eproto() {
    protobuf_AddDesc_GLSL_2eproto();
  }
} static_descriptor_initializer_GLSL_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UniformDefine::kNameFieldNumber;
const int UniformDefine::kTypeFieldNumber;
#endif  // !_MSC_VER

UniformDefine::UniformDefine()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UniformDefine::InitAsDefaultInstance() {
}

UniformDefine::UniformDefine(const UniformDefine& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UniformDefine::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniformDefine::~UniformDefine() {
  SharedDtor();
}

void UniformDefine::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UniformDefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UniformDefine& UniformDefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLSL_2eproto();  return *default_instance_;
}

UniformDefine* UniformDefine::default_instance_ = NULL;

UniformDefine* UniformDefine::New() const {
  return new UniformDefine;
}

void UniformDefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UniformDefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UniformDefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
}

int UniformDefine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniformDefine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UniformDefine*>(&from));
}

void UniformDefine::MergeFrom(const UniformDefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void UniformDefine::CopyFrom(const UniformDefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniformDefine::IsInitialized() const {
  
  return true;
}

void UniformDefine::Swap(UniformDefine* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UniformDefine::GetTypeName() const {
  return "Serializer.UniformDefine";
}


// ===================================================================

#ifndef _MSC_VER
const int AttributeDefine::kNameFieldNumber;
const int AttributeDefine::kStrideFieldNumber;
const int AttributeDefine::kOffsetFieldNumber;
const int AttributeDefine::kDataTypeFieldNumber;
const int AttributeDefine::kNormalizedFieldNumber;
const int AttributeDefine::kComponentCountFieldNumber;
#endif  // !_MSC_VER

AttributeDefine::AttributeDefine()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AttributeDefine::InitAsDefaultInstance() {
}

AttributeDefine::AttributeDefine(const AttributeDefine& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AttributeDefine::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stride_ = 0;
  offset_ = 0;
  data_type_ = 0;
  normalized_ = 0;
  component_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttributeDefine::~AttributeDefine() {
  SharedDtor();
}

void AttributeDefine::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AttributeDefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttributeDefine& AttributeDefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLSL_2eproto();  return *default_instance_;
}

AttributeDefine* AttributeDefine::default_instance_ = NULL;

AttributeDefine* AttributeDefine::New() const {
  return new AttributeDefine;
}

void AttributeDefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    stride_ = 0;
    offset_ = 0;
    data_type_ = 0;
    normalized_ = 0;
    component_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AttributeDefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stride;
        break;
      }
      
      // optional int32 stride = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }
      
      // optional int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data_type;
        break;
      }
      
      // optional int32 data_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_normalized;
        break;
      }
      
      // optional int32 normalized = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normalized_)));
          set_has_normalized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_component_count;
        break;
      }
      
      // optional int32 component_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_component_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &component_count_)));
          set_has_component_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttributeDefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 stride = 2;
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stride(), output);
  }
  
  // optional int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }
  
  // optional int32 data_type = 4;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->data_type(), output);
  }
  
  // optional int32 normalized = 5;
  if (has_normalized()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->normalized(), output);
  }
  
  // optional int32 component_count = 6;
  if (has_component_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->component_count(), output);
  }
  
}

int AttributeDefine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 stride = 2;
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }
    
    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // optional int32 data_type = 4;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type());
    }
    
    // optional int32 normalized = 5;
    if (has_normalized()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normalized());
    }
    
    // optional int32 component_count = 6;
    if (has_component_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->component_count());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeDefine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AttributeDefine*>(&from));
}

void AttributeDefine::MergeFrom(const AttributeDefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_normalized()) {
      set_normalized(from.normalized());
    }
    if (from.has_component_count()) {
      set_component_count(from.component_count());
    }
  }
}

void AttributeDefine::CopyFrom(const AttributeDefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeDefine::IsInitialized() const {
  
  return true;
}

void AttributeDefine::Swap(AttributeDefine* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(stride_, other->stride_);
    std::swap(offset_, other->offset_);
    std::swap(data_type_, other->data_type_);
    std::swap(normalized_, other->normalized_);
    std::swap(component_count_, other->component_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AttributeDefine::GetTypeName() const {
  return "Serializer.AttributeDefine";
}


// ===================================================================

#ifndef _MSC_VER
const int GLSL::kNameFieldNumber;
const int GLSL::kGuidFieldNumber;
const int GLSL::kVertCodeFieldNumber;
const int GLSL::kFragCodeFieldNumber;
const int GLSL::kAttributesFieldNumber;
const int GLSL::kUniformsFieldNumber;
const int GLSL::kLwtVSFieldNumber;
const int GLSL::kLwtFSFieldNumber;
#endif  // !_MSC_VER

GLSL::GLSL()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GLSL::InitAsDefaultInstance() {
}

GLSL::GLSL(const GLSL& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GLSL::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vert_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frag_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lwtvs_ = GOOGLE_ULONGLONG(0);
  lwtfs_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLSL::~GLSL() {
  SharedDtor();
}

void GLSL::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (vert_code_ != &::google::protobuf::internal::kEmptyString) {
    delete vert_code_;
  }
  if (frag_code_ != &::google::protobuf::internal::kEmptyString) {
    delete frag_code_;
  }
  if (this != default_instance_) {
  }
}

void GLSL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GLSL& GLSL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GLSL_2eproto();  return *default_instance_;
}

GLSL* GLSL::default_instance_ = NULL;

GLSL* GLSL::New() const {
  return new GLSL;
}

void GLSL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    if (has_vert_code()) {
      if (vert_code_ != &::google::protobuf::internal::kEmptyString) {
        vert_code_->clear();
      }
    }
    if (has_frag_code()) {
      if (frag_code_ != &::google::protobuf::internal::kEmptyString) {
        frag_code_->clear();
      }
    }
    lwtvs_ = GOOGLE_ULONGLONG(0);
    lwtfs_ = GOOGLE_ULONGLONG(0);
  }
  attributes_.Clear();
  uniforms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GLSL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guid;
        break;
      }
      
      // optional string guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vert_code;
        break;
      }
      
      // optional bytes vert_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vert_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vert_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_frag_code;
        break;
      }
      
      // optional bytes frag_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frag_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frag_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attributes;
        break;
      }
      
      // repeated .Serializer.AttributeDefine attributes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attributes;
        if (input->ExpectTag(50)) goto parse_uniforms;
        break;
      }
      
      // repeated .Serializer.UniformDefine uniforms = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniforms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uniforms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_uniforms;
        if (input->ExpectTag(57)) goto parse_lwtVS;
        break;
      }
      
      // optional fixed64 lwtVS = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lwtVS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lwtvs_)));
          set_has_lwtvs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_lwtFS;
        break;
      }
      
      // optional fixed64 lwtFS = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lwtFS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lwtfs_)));
          set_has_lwtfs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GLSL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guid(), output);
  }
  
  // optional bytes vert_code = 3;
  if (has_vert_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->vert_code(), output);
  }
  
  // optional bytes frag_code = 4;
  if (has_frag_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->frag_code(), output);
  }
  
  // repeated .Serializer.AttributeDefine attributes = 5;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->attributes(i), output);
  }
  
  // repeated .Serializer.UniformDefine uniforms = 6;
  for (int i = 0; i < this->uniforms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->uniforms(i), output);
  }
  
  // optional fixed64 lwtVS = 7;
  if (has_lwtvs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->lwtvs(), output);
  }
  
  // optional fixed64 lwtFS = 8;
  if (has_lwtfs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->lwtfs(), output);
  }
  
}

int GLSL::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }
    
    // optional bytes vert_code = 3;
    if (has_vert_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vert_code());
    }
    
    // optional bytes frag_code = 4;
    if (has_frag_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frag_code());
    }
    
    // optional fixed64 lwtVS = 7;
    if (has_lwtvs()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 lwtFS = 8;
    if (has_lwtfs()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .Serializer.AttributeDefine attributes = 5;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }
  
  // repeated .Serializer.UniformDefine uniforms = 6;
  total_size += 1 * this->uniforms_size();
  for (int i = 0; i < this->uniforms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uniforms(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLSL::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GLSL*>(&from));
}

void GLSL::MergeFrom(const GLSL& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  uniforms_.MergeFrom(from.uniforms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_vert_code()) {
      set_vert_code(from.vert_code());
    }
    if (from.has_frag_code()) {
      set_frag_code(from.frag_code());
    }
    if (from.has_lwtvs()) {
      set_lwtvs(from.lwtvs());
    }
    if (from.has_lwtfs()) {
      set_lwtfs(from.lwtfs());
    }
  }
}

void GLSL::CopyFrom(const GLSL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLSL::IsInitialized() const {
  
  return true;
}

void GLSL::Swap(GLSL* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(guid_, other->guid_);
    std::swap(vert_code_, other->vert_code_);
    std::swap(frag_code_, other->frag_code_);
    attributes_.Swap(&other->attributes_);
    uniforms_.Swap(&other->uniforms_);
    std::swap(lwtvs_, other->lwtvs_);
    std::swap(lwtfs_, other->lwtfs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GLSL::GetTypeName() const {
  return "Serializer.GLSL";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)
