// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Color.proto

#ifndef PROTOBUF_Color_2eproto__INCLUDED
#define PROTOBUF_Color_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Color_2eproto();
void protobuf_AssignDesc_Color_2eproto();
void protobuf_ShutdownFile_Color_2eproto();

class Color3B;
class ColorHSB;
class Color4B;
class Color3f;
class Color4f;

// ===================================================================

class Color3B : public ::google::protobuf::MessageLite {
 public:
  Color3B();
  virtual ~Color3B();
  
  Color3B(const Color3B& from);
  
  inline Color3B& operator=(const Color3B& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Color3B& default_instance();
  
  void Swap(Color3B* other);
  
  // implements Message ----------------------------------------------
  
  Color3B* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Color3B& from);
  void MergeFrom(const Color3B& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);
  
  // required int32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);
  
  // required int32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Serializer.Color3B)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  
  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Color_2eproto();
  friend void protobuf_AssignDesc_Color_2eproto();
  friend void protobuf_ShutdownFile_Color_2eproto();
  
  void InitAsDefaultInstance();
  static Color3B* default_instance_;
};
// -------------------------------------------------------------------

class ColorHSB : public ::google::protobuf::MessageLite {
 public:
  ColorHSB();
  virtual ~ColorHSB();
  
  ColorHSB(const ColorHSB& from);
  
  inline ColorHSB& operator=(const ColorHSB& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ColorHSB& default_instance();
  
  void Swap(ColorHSB* other);
  
  // implements Message ----------------------------------------------
  
  ColorHSB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ColorHSB& from);
  void MergeFrom(const ColorHSB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 h = 1;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 1;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);
  
  // required int32 s = 2;
  inline bool has_s() const;
  inline void clear_s();
  static const int kSFieldNumber = 2;
  inline ::google::protobuf::int32 s() const;
  inline void set_s(::google::protobuf::int32 value);
  
  // required int32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Serializer.ColorHSB)
 private:
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_s();
  inline void clear_has_s();
  inline void set_has_b();
  inline void clear_has_b();
  
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 s_;
  ::google::protobuf::int32 b_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Color_2eproto();
  friend void protobuf_AssignDesc_Color_2eproto();
  friend void protobuf_ShutdownFile_Color_2eproto();
  
  void InitAsDefaultInstance();
  static ColorHSB* default_instance_;
};
// -------------------------------------------------------------------

class Color4B : public ::google::protobuf::MessageLite {
 public:
  Color4B();
  virtual ~Color4B();
  
  Color4B(const Color4B& from);
  
  inline Color4B& operator=(const Color4B& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Color4B& default_instance();
  
  void Swap(Color4B* other);
  
  // implements Message ----------------------------------------------
  
  Color4B* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Color4B& from);
  void MergeFrom(const Color4B& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);
  
  // required int32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);
  
  // required int32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);
  
  // required int32 a = 4;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline ::google::protobuf::int32 a() const;
  inline void set_a(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Serializer.Color4B)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();
  
  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  ::google::protobuf::int32 a_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Color_2eproto();
  friend void protobuf_AssignDesc_Color_2eproto();
  friend void protobuf_ShutdownFile_Color_2eproto();
  
  void InitAsDefaultInstance();
  static Color4B* default_instance_;
};
// -------------------------------------------------------------------

class Color3f : public ::google::protobuf::MessageLite {
 public:
  Color3f();
  virtual ~Color3f();
  
  Color3f(const Color3f& from);
  
  inline Color3f& operator=(const Color3f& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Color3f& default_instance();
  
  void Swap(Color3f* other);
  
  // implements Message ----------------------------------------------
  
  Color3f* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Color3f& from);
  void MergeFrom(const Color3f& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline float r() const;
  inline void set_r(float value);
  
  // required float g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline float g() const;
  inline void set_g(float value);
  
  // required float b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline float b() const;
  inline void set_b(float value);
  
  // @@protoc_insertion_point(class_scope:Serializer.Color3f)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  
  float r_;
  float g_;
  float b_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Color_2eproto();
  friend void protobuf_AssignDesc_Color_2eproto();
  friend void protobuf_ShutdownFile_Color_2eproto();
  
  void InitAsDefaultInstance();
  static Color3f* default_instance_;
};
// -------------------------------------------------------------------

class Color4f : public ::google::protobuf::MessageLite {
 public:
  Color4f();
  virtual ~Color4f();
  
  Color4f(const Color4f& from);
  
  inline Color4f& operator=(const Color4f& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Color4f& default_instance();
  
  void Swap(Color4f* other);
  
  // implements Message ----------------------------------------------
  
  Color4f* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Color4f& from);
  void MergeFrom(const Color4f& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline float r() const;
  inline void set_r(float value);
  
  // required float g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline float g() const;
  inline void set_g(float value);
  
  // required float b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline float b() const;
  inline void set_b(float value);
  
  // required float a = 4;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline float a() const;
  inline void set_a(float value);
  
  // @@protoc_insertion_point(class_scope:Serializer.Color4f)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_a();
  inline void clear_has_a();
  
  float r_;
  float g_;
  float b_;
  float a_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Color_2eproto();
  friend void protobuf_AssignDesc_Color_2eproto();
  friend void protobuf_ShutdownFile_Color_2eproto();
  
  void InitAsDefaultInstance();
  static Color4f* default_instance_;
};
// ===================================================================


// ===================================================================

// Color3B

// required int32 r = 1;
inline bool Color3B::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color3B::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color3B::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color3B::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline ::google::protobuf::int32 Color3B::r() const {
  return r_;
}
inline void Color3B::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
}

// required int32 g = 2;
inline bool Color3B::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color3B::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color3B::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color3B::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline ::google::protobuf::int32 Color3B::g() const {
  return g_;
}
inline void Color3B::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
}

// required int32 b = 3;
inline bool Color3B::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color3B::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color3B::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color3B::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 Color3B::b() const {
  return b_;
}
inline void Color3B::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
}

// -------------------------------------------------------------------

// ColorHSB

// required int32 h = 1;
inline bool ColorHSB::has_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColorHSB::set_has_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColorHSB::clear_has_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColorHSB::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 ColorHSB::h() const {
  return h_;
}
inline void ColorHSB::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
}

// required int32 s = 2;
inline bool ColorHSB::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColorHSB::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColorHSB::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColorHSB::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline ::google::protobuf::int32 ColorHSB::s() const {
  return s_;
}
inline void ColorHSB::set_s(::google::protobuf::int32 value) {
  set_has_s();
  s_ = value;
}

// required int32 b = 3;
inline bool ColorHSB::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColorHSB::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColorHSB::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColorHSB::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 ColorHSB::b() const {
  return b_;
}
inline void ColorHSB::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
}

// -------------------------------------------------------------------

// Color4B

// required int32 r = 1;
inline bool Color4B::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color4B::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color4B::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color4B::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline ::google::protobuf::int32 Color4B::r() const {
  return r_;
}
inline void Color4B::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
}

// required int32 g = 2;
inline bool Color4B::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color4B::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color4B::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color4B::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline ::google::protobuf::int32 Color4B::g() const {
  return g_;
}
inline void Color4B::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
}

// required int32 b = 3;
inline bool Color4B::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color4B::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color4B::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color4B::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 Color4B::b() const {
  return b_;
}
inline void Color4B::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
}

// required int32 a = 4;
inline bool Color4B::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Color4B::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Color4B::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Color4B::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline ::google::protobuf::int32 Color4B::a() const {
  return a_;
}
inline void Color4B::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
}

// -------------------------------------------------------------------

// Color3f

// required float r = 1;
inline bool Color3f::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color3f::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color3f::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color3f::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float Color3f::r() const {
  return r_;
}
inline void Color3f::set_r(float value) {
  set_has_r();
  r_ = value;
}

// required float g = 2;
inline bool Color3f::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color3f::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color3f::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color3f::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float Color3f::g() const {
  return g_;
}
inline void Color3f::set_g(float value) {
  set_has_g();
  g_ = value;
}

// required float b = 3;
inline bool Color3f::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color3f::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color3f::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color3f::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float Color3f::b() const {
  return b_;
}
inline void Color3f::set_b(float value) {
  set_has_b();
  b_ = value;
}

// -------------------------------------------------------------------

// Color4f

// required float r = 1;
inline bool Color4f::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color4f::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color4f::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color4f::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float Color4f::r() const {
  return r_;
}
inline void Color4f::set_r(float value) {
  set_has_r();
  r_ = value;
}

// required float g = 2;
inline bool Color4f::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color4f::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color4f::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color4f::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float Color4f::g() const {
  return g_;
}
inline void Color4f::set_g(float value) {
  set_has_g();
  g_ = value;
}

// required float b = 3;
inline bool Color4f::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color4f::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color4f::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color4f::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float Color4f::b() const {
  return b_;
}
inline void Color4f::set_b(float value) {
  set_has_b();
  b_ = value;
}

// required float a = 4;
inline bool Color4f::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Color4f::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Color4f::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Color4f::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float Color4f::a() const {
  return a_;
}
inline void Color4f::set_a(float value) {
  set_has_a();
  a_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Color_2eproto__INCLUDED
