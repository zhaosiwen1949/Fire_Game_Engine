// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Material.proto

#ifndef PROTOBUF_Material_2eproto__INCLUDED
#define PROTOBUF_Material_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
#include "Vector.serializer.h"
#include "TextureAtlas.serializer.h"
#include "GLSL.serializer.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Material_2eproto();
void protobuf_AssignDesc_Material_2eproto();
void protobuf_ShutdownFile_Material_2eproto();

class Texture2DProperty;
class TextureCubeProperty;
class Vector4Property;
class IntArrayProperty;
class Vector4ArrayProperty;
class standard_lambert_material_param;
class standard_phong_material_param;
class standard_blin_phong_material_param;
class custom_material_param;
class builtin_uniform_param;
class Material;
class MaterialEx;

// ===================================================================

class Texture2DProperty : public ::google::protobuf::MessageLite {
 public:
  Texture2DProperty();
  virtual ~Texture2DProperty();
  
  Texture2DProperty(const Texture2DProperty& from);
  
  inline Texture2DProperty& operator=(const Texture2DProperty& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Texture2DProperty& default_instance();
  
  void Swap(Texture2DProperty* other);
  
  // implements Message ----------------------------------------------
  
  Texture2DProperty* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Texture2DProperty& from);
  void MergeFrom(const Texture2DProperty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string image = 2;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const char* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  
  // @@protoc_insertion_point(class_scope:Serializer.Texture2DProperty)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_image();
  inline void clear_has_image();
  
  ::std::string* name_;
  ::std::string* image_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static Texture2DProperty* default_instance_;
};
// -------------------------------------------------------------------

class TextureCubeProperty : public ::google::protobuf::MessageLite {
 public:
  TextureCubeProperty();
  virtual ~TextureCubeProperty();
  
  TextureCubeProperty(const TextureCubeProperty& from);
  
  inline TextureCubeProperty& operator=(const TextureCubeProperty& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const TextureCubeProperty& default_instance();
  
  void Swap(TextureCubeProperty* other);
  
  // implements Message ----------------------------------------------
  
  TextureCubeProperty* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TextureCubeProperty& from);
  void MergeFrom(const TextureCubeProperty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string image = 2;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const char* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  
  // @@protoc_insertion_point(class_scope:Serializer.TextureCubeProperty)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_image();
  inline void clear_has_image();
  
  ::std::string* name_;
  ::std::string* image_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static TextureCubeProperty* default_instance_;
};
// -------------------------------------------------------------------

class Vector4Property : public ::google::protobuf::MessageLite {
 public:
  Vector4Property();
  virtual ~Vector4Property();
  
  Vector4Property(const Vector4Property& from);
  
  inline Vector4Property& operator=(const Vector4Property& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Vector4Property& default_instance();
  
  void Swap(Vector4Property* other);
  
  // implements Message ----------------------------------------------
  
  Vector4Property* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Vector4Property& from);
  void MergeFrom(const Vector4Property& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated float value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();
  
  // @@protoc_insertion_point(class_scope:Serializer.Vector4Property)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::std::string* name_;
  ::google::protobuf::RepeatedField< float > value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static Vector4Property* default_instance_;
};
// -------------------------------------------------------------------

class IntArrayProperty : public ::google::protobuf::MessageLite {
 public:
  IntArrayProperty();
  virtual ~IntArrayProperty();
  
  IntArrayProperty(const IntArrayProperty& from);
  
  inline IntArrayProperty& operator=(const IntArrayProperty& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IntArrayProperty& default_instance();
  
  void Swap(IntArrayProperty* other);
  
  // implements Message ----------------------------------------------
  
  IntArrayProperty* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IntArrayProperty& from);
  void MergeFrom(const IntArrayProperty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated int32 value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();
  
  // @@protoc_insertion_point(class_scope:Serializer.IntArrayProperty)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static IntArrayProperty* default_instance_;
};
// -------------------------------------------------------------------

class Vector4ArrayProperty : public ::google::protobuf::MessageLite {
 public:
  Vector4ArrayProperty();
  virtual ~Vector4ArrayProperty();
  
  Vector4ArrayProperty(const Vector4ArrayProperty& from);
  
  inline Vector4ArrayProperty& operator=(const Vector4ArrayProperty& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Vector4ArrayProperty& default_instance();
  
  void Swap(Vector4ArrayProperty* other);
  
  // implements Message ----------------------------------------------
  
  Vector4ArrayProperty* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Vector4ArrayProperty& from);
  void MergeFrom(const Vector4ArrayProperty& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .Serializer.Vector4f value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::Serializer::Vector4f& value(int index) const;
  inline ::Serializer::Vector4f* mutable_value(int index);
  inline ::Serializer::Vector4f* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4f >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4f >*
      mutable_value();
  
  // @@protoc_insertion_point(class_scope:Serializer.Vector4ArrayProperty)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4f > value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static Vector4ArrayProperty* default_instance_;
};
// -------------------------------------------------------------------

class standard_lambert_material_param : public ::google::protobuf::MessageLite {
 public:
  standard_lambert_material_param();
  virtual ~standard_lambert_material_param();
  
  standard_lambert_material_param(const standard_lambert_material_param& from);
  
  inline standard_lambert_material_param& operator=(const standard_lambert_material_param& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const standard_lambert_material_param& default_instance();
  
  void Swap(standard_lambert_material_param* other);
  
  // implements Message ----------------------------------------------
  
  standard_lambert_material_param* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const standard_lambert_material_param& from);
  void MergeFrom(const standard_lambert_material_param& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Serializer.standard_lambert_material_param)
 private:
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static standard_lambert_material_param* default_instance_;
};
// -------------------------------------------------------------------

class standard_phong_material_param : public ::google::protobuf::MessageLite {
 public:
  standard_phong_material_param();
  virtual ~standard_phong_material_param();
  
  standard_phong_material_param(const standard_phong_material_param& from);
  
  inline standard_phong_material_param& operator=(const standard_phong_material_param& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const standard_phong_material_param& default_instance();
  
  void Swap(standard_phong_material_param* other);
  
  // implements Message ----------------------------------------------
  
  standard_phong_material_param* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const standard_phong_material_param& from);
  void MergeFrom(const standard_phong_material_param& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Serializer.standard_phong_material_param)
 private:
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static standard_phong_material_param* default_instance_;
};
// -------------------------------------------------------------------

class standard_blin_phong_material_param : public ::google::protobuf::MessageLite {
 public:
  standard_blin_phong_material_param();
  virtual ~standard_blin_phong_material_param();
  
  standard_blin_phong_material_param(const standard_blin_phong_material_param& from);
  
  inline standard_blin_phong_material_param& operator=(const standard_blin_phong_material_param& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const standard_blin_phong_material_param& default_instance();
  
  void Swap(standard_blin_phong_material_param* other);
  
  // implements Message ----------------------------------------------
  
  standard_blin_phong_material_param* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const standard_blin_phong_material_param& from);
  void MergeFrom(const standard_blin_phong_material_param& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:Serializer.standard_blin_phong_material_param)
 private:
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static standard_blin_phong_material_param* default_instance_;
};
// -------------------------------------------------------------------

class custom_material_param : public ::google::protobuf::MessageLite {
 public:
  custom_material_param();
  virtual ~custom_material_param();
  
  custom_material_param(const custom_material_param& from);
  
  inline custom_material_param& operator=(const custom_material_param& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const custom_material_param& default_instance();
  
  void Swap(custom_material_param* other);
  
  // implements Message ----------------------------------------------
  
  custom_material_param* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const custom_material_param& from);
  void MergeFrom(const custom_material_param& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Serializer.Texture2DProperty sampler2ds = 1;
  inline int sampler2ds_size() const;
  inline void clear_sampler2ds();
  static const int kSampler2DsFieldNumber = 1;
  inline const ::Serializer::Texture2DProperty& sampler2ds(int index) const;
  inline ::Serializer::Texture2DProperty* mutable_sampler2ds(int index);
  inline ::Serializer::Texture2DProperty* add_sampler2ds();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >&
      sampler2ds() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >*
      mutable_sampler2ds();
  
  // repeated .Serializer.Vector4Property vec4s = 2;
  inline int vec4s_size() const;
  inline void clear_vec4s();
  static const int kVec4SFieldNumber = 2;
  inline const ::Serializer::Vector4Property& vec4s(int index) const;
  inline ::Serializer::Vector4Property* mutable_vec4s(int index);
  inline ::Serializer::Vector4Property* add_vec4s();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >&
      vec4s() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >*
      mutable_vec4s();
  
  // @@protoc_insertion_point(class_scope:Serializer.custom_material_param)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty > sampler2ds_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property > vec4s_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static custom_material_param* default_instance_;
};
// -------------------------------------------------------------------

class builtin_uniform_param : public ::google::protobuf::MessageLite {
 public:
  builtin_uniform_param();
  virtual ~builtin_uniform_param();
  
  builtin_uniform_param(const builtin_uniform_param& from);
  
  inline builtin_uniform_param& operator=(const builtin_uniform_param& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const builtin_uniform_param& default_instance();
  
  void Swap(builtin_uniform_param* other);
  
  // implements Message ----------------------------------------------
  
  builtin_uniform_param* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const builtin_uniform_param& from);
  void MergeFrom(const builtin_uniform_param& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Serializer.UniformDefine uniforms = 1;
  inline int uniforms_size() const;
  inline void clear_uniforms();
  static const int kUniformsFieldNumber = 1;
  inline const ::Serializer::UniformDefine& uniforms(int index) const;
  inline ::Serializer::UniformDefine* mutable_uniforms(int index);
  inline ::Serializer::UniformDefine* add_uniforms();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::UniformDefine >&
      uniforms() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::UniformDefine >*
      mutable_uniforms();
  
  // @@protoc_insertion_point(class_scope:Serializer.builtin_uniform_param)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::Serializer::UniformDefine > uniforms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static builtin_uniform_param* default_instance_;
};
// -------------------------------------------------------------------

class Material : public ::google::protobuf::MessageLite {
 public:
  Material();
  virtual ~Material();
  
  Material(const Material& from);
  
  inline Material& operator=(const Material& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Material& default_instance();
  
  void Swap(Material* other);
  
  // implements Message ----------------------------------------------
  
  Material* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Material& from);
  void MergeFrom(const Material& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // optional string shader = 2;
  inline bool has_shader() const;
  inline void clear_shader();
  static const int kShaderFieldNumber = 2;
  inline const ::std::string& shader() const;
  inline void set_shader(const ::std::string& value);
  inline void set_shader(const char* value);
  inline void set_shader(const char* value, size_t size);
  inline ::std::string* mutable_shader();
  inline ::std::string* release_shader();
  
  // repeated .Serializer.Texture2DProperty mSampler2DProperties_desperated = 3;
  inline int msampler2dproperties_desperated_size() const;
  inline void clear_msampler2dproperties_desperated();
  static const int kMSampler2DPropertiesDesperatedFieldNumber = 3;
  inline const ::Serializer::Texture2DProperty& msampler2dproperties_desperated(int index) const;
  inline ::Serializer::Texture2DProperty* mutable_msampler2dproperties_desperated(int index);
  inline ::Serializer::Texture2DProperty* add_msampler2dproperties_desperated();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >&
      msampler2dproperties_desperated() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >*
      mutable_msampler2dproperties_desperated();
  
  // repeated .Serializer.Vector4Property mVector4fProperties_desperated = 4;
  inline int mvector4fproperties_desperated_size() const;
  inline void clear_mvector4fproperties_desperated();
  static const int kMVector4FPropertiesDesperatedFieldNumber = 4;
  inline const ::Serializer::Vector4Property& mvector4fproperties_desperated(int index) const;
  inline ::Serializer::Vector4Property* mutable_mvector4fproperties_desperated(int index);
  inline ::Serializer::Vector4Property* add_mvector4fproperties_desperated();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >&
      mvector4fproperties_desperated() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >*
      mutable_mvector4fproperties_desperated();
  
  // optional bool useAtlas = 5;
  inline bool has_useatlas() const;
  inline void clear_useatlas();
  static const int kUseAtlasFieldNumber = 5;
  inline bool useatlas() const;
  inline void set_useatlas(bool value);
  
  // optional fixed64 lwt_shader = 6;
  inline bool has_lwt_shader() const;
  inline void clear_lwt_shader();
  static const int kLwtShaderFieldNumber = 6;
  inline ::google::protobuf::uint64 lwt_shader() const;
  inline void set_lwt_shader(::google::protobuf::uint64 value);
  
  // repeated .Serializer.ImageTile sprites = 7;
  inline int sprites_size() const;
  inline void clear_sprites();
  static const int kSpritesFieldNumber = 7;
  inline const ::Serializer::ImageTile& sprites(int index) const;
  inline ::Serializer::ImageTile* mutable_sprites(int index);
  inline ::Serializer::ImageTile* add_sprites();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >&
      sprites() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >*
      mutable_sprites();
  
  // optional string vsshader = 8;
  inline bool has_vsshader() const;
  inline void clear_vsshader();
  static const int kVsshaderFieldNumber = 8;
  inline const ::std::string& vsshader() const;
  inline void set_vsshader(const ::std::string& value);
  inline void set_vsshader(const char* value);
  inline void set_vsshader(const char* value, size_t size);
  inline ::std::string* mutable_vsshader();
  inline ::std::string* release_vsshader();
  
  // optional bool enable_blend = 9;
  inline bool has_enable_blend() const;
  inline void clear_enable_blend();
  static const int kEnableBlendFieldNumber = 9;
  inline bool enable_blend() const;
  inline void set_enable_blend(bool value);
  
  // optional bool enable_program_point_size = 10;
  inline bool has_enable_program_point_size() const;
  inline void clear_enable_program_point_size();
  static const int kEnableProgramPointSizeFieldNumber = 10;
  inline bool enable_program_point_size() const;
  inline void set_enable_program_point_size(bool value);
  
  // optional bool enable_point_sprite = 11;
  inline bool has_enable_point_sprite() const;
  inline void clear_enable_point_sprite();
  static const int kEnablePointSpriteFieldNumber = 11;
  inline bool enable_point_sprite() const;
  inline void set_enable_point_sprite(bool value);
  
  // optional .Serializer.standard_lambert_material_param lambert_params = 12;
  inline bool has_lambert_params() const;
  inline void clear_lambert_params();
  static const int kLambertParamsFieldNumber = 12;
  inline const ::Serializer::standard_lambert_material_param& lambert_params() const;
  inline ::Serializer::standard_lambert_material_param* mutable_lambert_params();
  inline ::Serializer::standard_lambert_material_param* release_lambert_params();
  
  // optional .Serializer.standard_phong_material_param phong_params = 13;
  inline bool has_phong_params() const;
  inline void clear_phong_params();
  static const int kPhongParamsFieldNumber = 13;
  inline const ::Serializer::standard_phong_material_param& phong_params() const;
  inline ::Serializer::standard_phong_material_param* mutable_phong_params();
  inline ::Serializer::standard_phong_material_param* release_phong_params();
  
  // optional .Serializer.standard_blin_phong_material_param blin_phong_params = 14;
  inline bool has_blin_phong_params() const;
  inline void clear_blin_phong_params();
  static const int kBlinPhongParamsFieldNumber = 14;
  inline const ::Serializer::standard_blin_phong_material_param& blin_phong_params() const;
  inline ::Serializer::standard_blin_phong_material_param* mutable_blin_phong_params();
  inline ::Serializer::standard_blin_phong_material_param* release_blin_phong_params();
  
  // optional .Serializer.custom_material_param custom_params = 15;
  inline bool has_custom_params() const;
  inline void clear_custom_params();
  static const int kCustomParamsFieldNumber = 15;
  inline const ::Serializer::custom_material_param& custom_params() const;
  inline ::Serializer::custom_material_param* mutable_custom_params();
  inline ::Serializer::custom_material_param* release_custom_params();
  
  // optional int32 blend_func_src = 16;
  inline bool has_blend_func_src() const;
  inline void clear_blend_func_src();
  static const int kBlendFuncSrcFieldNumber = 16;
  inline ::google::protobuf::int32 blend_func_src() const;
  inline void set_blend_func_src(::google::protobuf::int32 value);
  
  // optional int32 blend_func_dst = 17;
  inline bool has_blend_func_dst() const;
  inline void clear_blend_func_dst();
  static const int kBlendFuncDstFieldNumber = 17;
  inline ::google::protobuf::int32 blend_func_dst() const;
  inline void set_blend_func_dst(::google::protobuf::int32 value);
  
  // optional .Serializer.builtin_uniform_param builtin_params = 18;
  inline bool has_builtin_params() const;
  inline void clear_builtin_params();
  static const int kBuiltinParamsFieldNumber = 18;
  inline const ::Serializer::builtin_uniform_param& builtin_params() const;
  inline ::Serializer::builtin_uniform_param* mutable_builtin_params();
  inline ::Serializer::builtin_uniform_param* release_builtin_params();
  
  // @@protoc_insertion_point(class_scope:Serializer.Material)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_shader();
  inline void clear_has_shader();
  inline void set_has_useatlas();
  inline void clear_has_useatlas();
  inline void set_has_lwt_shader();
  inline void clear_has_lwt_shader();
  inline void set_has_vsshader();
  inline void clear_has_vsshader();
  inline void set_has_enable_blend();
  inline void clear_has_enable_blend();
  inline void set_has_enable_program_point_size();
  inline void clear_has_enable_program_point_size();
  inline void set_has_enable_point_sprite();
  inline void clear_has_enable_point_sprite();
  inline void set_has_lambert_params();
  inline void clear_has_lambert_params();
  inline void set_has_phong_params();
  inline void clear_has_phong_params();
  inline void set_has_blin_phong_params();
  inline void clear_has_blin_phong_params();
  inline void set_has_custom_params();
  inline void clear_has_custom_params();
  inline void set_has_blend_func_src();
  inline void clear_has_blend_func_src();
  inline void set_has_blend_func_dst();
  inline void clear_has_blend_func_dst();
  inline void set_has_builtin_params();
  inline void clear_has_builtin_params();
  
  ::std::string* path_;
  ::std::string* shader_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty > msampler2dproperties_desperated_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property > mvector4fproperties_desperated_;
  ::google::protobuf::uint64 lwt_shader_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile > sprites_;
  ::std::string* vsshader_;
  bool useatlas_;
  bool enable_blend_;
  bool enable_program_point_size_;
  bool enable_point_sprite_;
  ::google::protobuf::int32 blend_func_src_;
  ::Serializer::standard_lambert_material_param* lambert_params_;
  ::Serializer::standard_phong_material_param* phong_params_;
  ::Serializer::standard_blin_phong_material_param* blin_phong_params_;
  ::Serializer::custom_material_param* custom_params_;
  ::Serializer::builtin_uniform_param* builtin_params_;
  ::google::protobuf::int32 blend_func_dst_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static Material* default_instance_;
};
// -------------------------------------------------------------------

class MaterialEx : public ::google::protobuf::MessageLite {
 public:
  MaterialEx();
  virtual ~MaterialEx();
  
  MaterialEx(const MaterialEx& from);
  
  inline MaterialEx& operator=(const MaterialEx& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const MaterialEx& default_instance();
  
  void Swap(MaterialEx* other);
  
  // implements Message ----------------------------------------------
  
  MaterialEx* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MaterialEx& from);
  void MergeFrom(const MaterialEx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .Serializer.Texture2DProperty texture2ds = 2;
  inline int texture2ds_size() const;
  inline void clear_texture2ds();
  static const int kTexture2DsFieldNumber = 2;
  inline const ::Serializer::Texture2DProperty& texture2ds(int index) const;
  inline ::Serializer::Texture2DProperty* mutable_texture2ds(int index);
  inline ::Serializer::Texture2DProperty* add_texture2ds();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >&
      texture2ds() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >*
      mutable_texture2ds();
  
  // repeated .Serializer.TextureCubeProperty texture_cubes = 3;
  inline int texture_cubes_size() const;
  inline void clear_texture_cubes();
  static const int kTextureCubesFieldNumber = 3;
  inline const ::Serializer::TextureCubeProperty& texture_cubes(int index) const;
  inline ::Serializer::TextureCubeProperty* mutable_texture_cubes(int index);
  inline ::Serializer::TextureCubeProperty* add_texture_cubes();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::TextureCubeProperty >&
      texture_cubes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::TextureCubeProperty >*
      mutable_texture_cubes();
  
  // repeated .Serializer.Vector4Property vector4s = 4;
  inline int vector4s_size() const;
  inline void clear_vector4s();
  static const int kVector4SFieldNumber = 4;
  inline const ::Serializer::Vector4Property& vector4s(int index) const;
  inline ::Serializer::Vector4Property* mutable_vector4s(int index);
  inline ::Serializer::Vector4Property* add_vector4s();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >&
      vector4s() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >*
      mutable_vector4s();
  
  // repeated .Serializer.IntArrayProperty int_array = 5;
  inline int int_array_size() const;
  inline void clear_int_array();
  static const int kIntArrayFieldNumber = 5;
  inline const ::Serializer::IntArrayProperty& int_array(int index) const;
  inline ::Serializer::IntArrayProperty* mutable_int_array(int index);
  inline ::Serializer::IntArrayProperty* add_int_array();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::IntArrayProperty >&
      int_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::IntArrayProperty >*
      mutable_int_array();
  
  // repeated .Serializer.Vector4ArrayProperty vector4_array = 6;
  inline int vector4_array_size() const;
  inline void clear_vector4_array();
  static const int kVector4ArrayFieldNumber = 6;
  inline const ::Serializer::Vector4ArrayProperty& vector4_array(int index) const;
  inline ::Serializer::Vector4ArrayProperty* mutable_vector4_array(int index);
  inline ::Serializer::Vector4ArrayProperty* add_vector4_array();
  inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4ArrayProperty >&
      vector4_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4ArrayProperty >*
      mutable_vector4_array();
  
  // repeated string mat4s = 7;
  inline int mat4s_size() const;
  inline void clear_mat4s();
  static const int kMat4SFieldNumber = 7;
  inline const ::std::string& mat4s(int index) const;
  inline ::std::string* mutable_mat4s(int index);
  inline void set_mat4s(int index, const ::std::string& value);
  inline void set_mat4s(int index, const char* value);
  inline void set_mat4s(int index, const char* value, size_t size);
  inline ::std::string* add_mat4s();
  inline void add_mat4s(const ::std::string& value);
  inline void add_mat4s(const char* value);
  inline void add_mat4s(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mat4s() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mat4s();
  
  // repeated string mat3s = 8;
  inline int mat3s_size() const;
  inline void clear_mat3s();
  static const int kMat3SFieldNumber = 8;
  inline const ::std::string& mat3s(int index) const;
  inline ::std::string* mutable_mat3s(int index);
  inline void set_mat3s(int index, const ::std::string& value);
  inline void set_mat3s(int index, const char* value);
  inline void set_mat3s(int index, const char* value, size_t size);
  inline ::std::string* add_mat3s();
  inline void add_mat3s(const ::std::string& value);
  inline void add_mat3s(const char* value);
  inline void add_mat3s(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mat3s() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mat3s();
  
  // repeated int32 blend_func = 9;
  inline int blend_func_size() const;
  inline void clear_blend_func();
  static const int kBlendFuncFieldNumber = 9;
  inline ::google::protobuf::int32 blend_func(int index) const;
  inline void set_blend_func(int index, ::google::protobuf::int32 value);
  inline void add_blend_func(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      blend_func() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_blend_func();
  
  // optional bool enable_blend = 10;
  inline bool has_enable_blend() const;
  inline void clear_enable_blend();
  static const int kEnableBlendFieldNumber = 10;
  inline bool enable_blend() const;
  inline void set_enable_blend(bool value);
  
  // optional bool enable_program_point_size = 11;
  inline bool has_enable_program_point_size() const;
  inline void clear_enable_program_point_size();
  static const int kEnableProgramPointSizeFieldNumber = 11;
  inline bool enable_program_point_size() const;
  inline void set_enable_program_point_size(bool value);
  
  // optional bool enable_point_sprite = 12;
  inline bool has_enable_point_sprite() const;
  inline void clear_enable_point_sprite();
  static const int kEnablePointSpriteFieldNumber = 12;
  inline bool enable_point_sprite() const;
  inline void set_enable_point_sprite(bool value);
  
  // optional bool enable_cull_face = 13;
  inline bool has_enable_cull_face() const;
  inline void clear_enable_cull_face();
  static const int kEnableCullFaceFieldNumber = 13;
  inline bool enable_cull_face() const;
  inline void set_enable_cull_face(bool value);
  
  // optional int32 cull_face_mode = 14;
  inline bool has_cull_face_mode() const;
  inline void clear_cull_face_mode();
  static const int kCullFaceModeFieldNumber = 14;
  inline ::google::protobuf::int32 cull_face_mode() const;
  inline void set_cull_face_mode(::google::protobuf::int32 value);
  
  // optional bool enable_depth_test = 15;
  inline bool has_enable_depth_test() const;
  inline void clear_enable_depth_test();
  static const int kEnableDepthTestFieldNumber = 15;
  inline bool enable_depth_test() const;
  inline void set_enable_depth_test(bool value);
  
  // optional int32 primitive_type = 16;
  inline bool has_primitive_type() const;
  inline void clear_primitive_type();
  static const int kPrimitiveTypeFieldNumber = 16;
  inline ::google::protobuf::int32 primitive_type() const;
  inline void set_primitive_type(::google::protobuf::int32 value);
  
  // optional string vs_shader = 17;
  inline bool has_vs_shader() const;
  inline void clear_vs_shader();
  static const int kVsShaderFieldNumber = 17;
  inline const ::std::string& vs_shader() const;
  inline void set_vs_shader(const ::std::string& value);
  inline void set_vs_shader(const char* value);
  inline void set_vs_shader(const char* value, size_t size);
  inline ::std::string* mutable_vs_shader();
  inline ::std::string* release_vs_shader();
  
  // optional string fs_shader = 18;
  inline bool has_fs_shader() const;
  inline void clear_fs_shader();
  static const int kFsShaderFieldNumber = 18;
  inline const ::std::string& fs_shader() const;
  inline void set_fs_shader(const ::std::string& value);
  inline void set_fs_shader(const char* value);
  inline void set_fs_shader(const char* value, size_t size);
  inline ::std::string* mutable_fs_shader();
  inline ::std::string* release_fs_shader();
  
  // @@protoc_insertion_point(class_scope:Serializer.MaterialEx)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_enable_blend();
  inline void clear_has_enable_blend();
  inline void set_has_enable_program_point_size();
  inline void clear_has_enable_program_point_size();
  inline void set_has_enable_point_sprite();
  inline void clear_has_enable_point_sprite();
  inline void set_has_enable_cull_face();
  inline void clear_has_enable_cull_face();
  inline void set_has_cull_face_mode();
  inline void clear_has_cull_face_mode();
  inline void set_has_enable_depth_test();
  inline void clear_has_enable_depth_test();
  inline void set_has_primitive_type();
  inline void clear_has_primitive_type();
  inline void set_has_vs_shader();
  inline void clear_has_vs_shader();
  inline void set_has_fs_shader();
  inline void clear_has_fs_shader();
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty > texture2ds_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::TextureCubeProperty > texture_cubes_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property > vector4s_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::IntArrayProperty > int_array_;
  ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4ArrayProperty > vector4_array_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mat4s_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mat3s_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > blend_func_;
  bool enable_blend_;
  bool enable_program_point_size_;
  bool enable_point_sprite_;
  bool enable_cull_face_;
  ::google::protobuf::int32 cull_face_mode_;
  bool enable_depth_test_;
  ::google::protobuf::int32 primitive_type_;
  ::std::string* vs_shader_;
  ::std::string* fs_shader_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_Material_2eproto();
  friend void protobuf_AssignDesc_Material_2eproto();
  friend void protobuf_ShutdownFile_Material_2eproto();
  
  void InitAsDefaultInstance();
  static MaterialEx* default_instance_;
};
// ===================================================================


// ===================================================================

// Texture2DProperty

// optional string name = 1;
inline bool Texture2DProperty::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Texture2DProperty::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Texture2DProperty::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Texture2DProperty::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Texture2DProperty::name() const {
  return *name_;
}
inline void Texture2DProperty::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Texture2DProperty::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Texture2DProperty::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Texture2DProperty::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Texture2DProperty::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string image = 2;
inline bool Texture2DProperty::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Texture2DProperty::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Texture2DProperty::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Texture2DProperty::clear_image() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& Texture2DProperty::image() const {
  return *image_;
}
inline void Texture2DProperty::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void Texture2DProperty::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void Texture2DProperty::set_image(const char* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Texture2DProperty::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  return image_;
}
inline ::std::string* Texture2DProperty::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TextureCubeProperty

// optional string name = 1;
inline bool TextureCubeProperty::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TextureCubeProperty::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TextureCubeProperty::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TextureCubeProperty::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TextureCubeProperty::name() const {
  return *name_;
}
inline void TextureCubeProperty::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TextureCubeProperty::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TextureCubeProperty::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TextureCubeProperty::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TextureCubeProperty::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string image = 2;
inline bool TextureCubeProperty::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TextureCubeProperty::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TextureCubeProperty::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TextureCubeProperty::clear_image() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& TextureCubeProperty::image() const {
  return *image_;
}
inline void TextureCubeProperty::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void TextureCubeProperty::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void TextureCubeProperty::set_image(const char* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TextureCubeProperty::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  return image_;
}
inline ::std::string* TextureCubeProperty::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Vector4Property

// optional string name = 1;
inline bool Vector4Property::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector4Property::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector4Property::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector4Property::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Vector4Property::name() const {
  return *name_;
}
inline void Vector4Property::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Vector4Property::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Vector4Property::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Vector4Property::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Vector4Property::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated float value = 2;
inline int Vector4Property::value_size() const {
  return value_.size();
}
inline void Vector4Property::clear_value() {
  value_.Clear();
}
inline float Vector4Property::value(int index) const {
  return value_.Get(index);
}
inline void Vector4Property::set_value(int index, float value) {
  value_.Set(index, value);
}
inline void Vector4Property::add_value(float value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Vector4Property::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
Vector4Property::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// IntArrayProperty

// optional string name = 1;
inline bool IntArrayProperty::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntArrayProperty::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntArrayProperty::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntArrayProperty::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IntArrayProperty::name() const {
  return *name_;
}
inline void IntArrayProperty::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IntArrayProperty::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IntArrayProperty::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IntArrayProperty::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* IntArrayProperty::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 value = 2;
inline int IntArrayProperty::value_size() const {
  return value_.size();
}
inline void IntArrayProperty::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 IntArrayProperty::value(int index) const {
  return value_.Get(index);
}
inline void IntArrayProperty::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
}
inline void IntArrayProperty::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IntArrayProperty::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IntArrayProperty::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// Vector4ArrayProperty

// optional string name = 1;
inline bool Vector4ArrayProperty::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector4ArrayProperty::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector4ArrayProperty::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector4ArrayProperty::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Vector4ArrayProperty::name() const {
  return *name_;
}
inline void Vector4ArrayProperty::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Vector4ArrayProperty::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Vector4ArrayProperty::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Vector4ArrayProperty::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Vector4ArrayProperty::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Serializer.Vector4f value = 2;
inline int Vector4ArrayProperty::value_size() const {
  return value_.size();
}
inline void Vector4ArrayProperty::clear_value() {
  value_.Clear();
}
inline const ::Serializer::Vector4f& Vector4ArrayProperty::value(int index) const {
  return value_.Get(index);
}
inline ::Serializer::Vector4f* Vector4ArrayProperty::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::Serializer::Vector4f* Vector4ArrayProperty::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4f >&
Vector4ArrayProperty::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4f >*
Vector4ArrayProperty::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// standard_lambert_material_param

// -------------------------------------------------------------------

// standard_phong_material_param

// -------------------------------------------------------------------

// standard_blin_phong_material_param

// -------------------------------------------------------------------

// custom_material_param

// repeated .Serializer.Texture2DProperty sampler2ds = 1;
inline int custom_material_param::sampler2ds_size() const {
  return sampler2ds_.size();
}
inline void custom_material_param::clear_sampler2ds() {
  sampler2ds_.Clear();
}
inline const ::Serializer::Texture2DProperty& custom_material_param::sampler2ds(int index) const {
  return sampler2ds_.Get(index);
}
inline ::Serializer::Texture2DProperty* custom_material_param::mutable_sampler2ds(int index) {
  return sampler2ds_.Mutable(index);
}
inline ::Serializer::Texture2DProperty* custom_material_param::add_sampler2ds() {
  return sampler2ds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >&
custom_material_param::sampler2ds() const {
  return sampler2ds_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >*
custom_material_param::mutable_sampler2ds() {
  return &sampler2ds_;
}

// repeated .Serializer.Vector4Property vec4s = 2;
inline int custom_material_param::vec4s_size() const {
  return vec4s_.size();
}
inline void custom_material_param::clear_vec4s() {
  vec4s_.Clear();
}
inline const ::Serializer::Vector4Property& custom_material_param::vec4s(int index) const {
  return vec4s_.Get(index);
}
inline ::Serializer::Vector4Property* custom_material_param::mutable_vec4s(int index) {
  return vec4s_.Mutable(index);
}
inline ::Serializer::Vector4Property* custom_material_param::add_vec4s() {
  return vec4s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >&
custom_material_param::vec4s() const {
  return vec4s_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >*
custom_material_param::mutable_vec4s() {
  return &vec4s_;
}

// -------------------------------------------------------------------

// builtin_uniform_param

// repeated .Serializer.UniformDefine uniforms = 1;
inline int builtin_uniform_param::uniforms_size() const {
  return uniforms_.size();
}
inline void builtin_uniform_param::clear_uniforms() {
  uniforms_.Clear();
}
inline const ::Serializer::UniformDefine& builtin_uniform_param::uniforms(int index) const {
  return uniforms_.Get(index);
}
inline ::Serializer::UniformDefine* builtin_uniform_param::mutable_uniforms(int index) {
  return uniforms_.Mutable(index);
}
inline ::Serializer::UniformDefine* builtin_uniform_param::add_uniforms() {
  return uniforms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::UniformDefine >&
builtin_uniform_param::uniforms() const {
  return uniforms_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::UniformDefine >*
builtin_uniform_param::mutable_uniforms() {
  return &uniforms_;
}

// -------------------------------------------------------------------

// Material

// optional string path = 1;
inline bool Material::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Material::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Material::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Material::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Material::path() const {
  return *path_;
}
inline void Material::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Material::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Material::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Material::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* Material::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string shader = 2;
inline bool Material::has_shader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Material::set_has_shader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Material::clear_has_shader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Material::clear_shader() {
  if (shader_ != &::google::protobuf::internal::kEmptyString) {
    shader_->clear();
  }
  clear_has_shader();
}
inline const ::std::string& Material::shader() const {
  return *shader_;
}
inline void Material::set_shader(const ::std::string& value) {
  set_has_shader();
  if (shader_ == &::google::protobuf::internal::kEmptyString) {
    shader_ = new ::std::string;
  }
  shader_->assign(value);
}
inline void Material::set_shader(const char* value) {
  set_has_shader();
  if (shader_ == &::google::protobuf::internal::kEmptyString) {
    shader_ = new ::std::string;
  }
  shader_->assign(value);
}
inline void Material::set_shader(const char* value, size_t size) {
  set_has_shader();
  if (shader_ == &::google::protobuf::internal::kEmptyString) {
    shader_ = new ::std::string;
  }
  shader_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Material::mutable_shader() {
  set_has_shader();
  if (shader_ == &::google::protobuf::internal::kEmptyString) {
    shader_ = new ::std::string;
  }
  return shader_;
}
inline ::std::string* Material::release_shader() {
  clear_has_shader();
  if (shader_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shader_;
    shader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Serializer.Texture2DProperty mSampler2DProperties_desperated = 3;
inline int Material::msampler2dproperties_desperated_size() const {
  return msampler2dproperties_desperated_.size();
}
inline void Material::clear_msampler2dproperties_desperated() {
  msampler2dproperties_desperated_.Clear();
}
inline const ::Serializer::Texture2DProperty& Material::msampler2dproperties_desperated(int index) const {
  return msampler2dproperties_desperated_.Get(index);
}
inline ::Serializer::Texture2DProperty* Material::mutable_msampler2dproperties_desperated(int index) {
  return msampler2dproperties_desperated_.Mutable(index);
}
inline ::Serializer::Texture2DProperty* Material::add_msampler2dproperties_desperated() {
  return msampler2dproperties_desperated_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >&
Material::msampler2dproperties_desperated() const {
  return msampler2dproperties_desperated_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >*
Material::mutable_msampler2dproperties_desperated() {
  return &msampler2dproperties_desperated_;
}

// repeated .Serializer.Vector4Property mVector4fProperties_desperated = 4;
inline int Material::mvector4fproperties_desperated_size() const {
  return mvector4fproperties_desperated_.size();
}
inline void Material::clear_mvector4fproperties_desperated() {
  mvector4fproperties_desperated_.Clear();
}
inline const ::Serializer::Vector4Property& Material::mvector4fproperties_desperated(int index) const {
  return mvector4fproperties_desperated_.Get(index);
}
inline ::Serializer::Vector4Property* Material::mutable_mvector4fproperties_desperated(int index) {
  return mvector4fproperties_desperated_.Mutable(index);
}
inline ::Serializer::Vector4Property* Material::add_mvector4fproperties_desperated() {
  return mvector4fproperties_desperated_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >&
Material::mvector4fproperties_desperated() const {
  return mvector4fproperties_desperated_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >*
Material::mutable_mvector4fproperties_desperated() {
  return &mvector4fproperties_desperated_;
}

// optional bool useAtlas = 5;
inline bool Material::has_useatlas() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Material::set_has_useatlas() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Material::clear_has_useatlas() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Material::clear_useatlas() {
  useatlas_ = false;
  clear_has_useatlas();
}
inline bool Material::useatlas() const {
  return useatlas_;
}
inline void Material::set_useatlas(bool value) {
  set_has_useatlas();
  useatlas_ = value;
}

// optional fixed64 lwt_shader = 6;
inline bool Material::has_lwt_shader() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Material::set_has_lwt_shader() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Material::clear_has_lwt_shader() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Material::clear_lwt_shader() {
  lwt_shader_ = GOOGLE_ULONGLONG(0);
  clear_has_lwt_shader();
}
inline ::google::protobuf::uint64 Material::lwt_shader() const {
  return lwt_shader_;
}
inline void Material::set_lwt_shader(::google::protobuf::uint64 value) {
  set_has_lwt_shader();
  lwt_shader_ = value;
}

// repeated .Serializer.ImageTile sprites = 7;
inline int Material::sprites_size() const {
  return sprites_.size();
}
inline void Material::clear_sprites() {
  sprites_.Clear();
}
inline const ::Serializer::ImageTile& Material::sprites(int index) const {
  return sprites_.Get(index);
}
inline ::Serializer::ImageTile* Material::mutable_sprites(int index) {
  return sprites_.Mutable(index);
}
inline ::Serializer::ImageTile* Material::add_sprites() {
  return sprites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >&
Material::sprites() const {
  return sprites_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::ImageTile >*
Material::mutable_sprites() {
  return &sprites_;
}

// optional string vsshader = 8;
inline bool Material::has_vsshader() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Material::set_has_vsshader() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Material::clear_has_vsshader() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Material::clear_vsshader() {
  if (vsshader_ != &::google::protobuf::internal::kEmptyString) {
    vsshader_->clear();
  }
  clear_has_vsshader();
}
inline const ::std::string& Material::vsshader() const {
  return *vsshader_;
}
inline void Material::set_vsshader(const ::std::string& value) {
  set_has_vsshader();
  if (vsshader_ == &::google::protobuf::internal::kEmptyString) {
    vsshader_ = new ::std::string;
  }
  vsshader_->assign(value);
}
inline void Material::set_vsshader(const char* value) {
  set_has_vsshader();
  if (vsshader_ == &::google::protobuf::internal::kEmptyString) {
    vsshader_ = new ::std::string;
  }
  vsshader_->assign(value);
}
inline void Material::set_vsshader(const char* value, size_t size) {
  set_has_vsshader();
  if (vsshader_ == &::google::protobuf::internal::kEmptyString) {
    vsshader_ = new ::std::string;
  }
  vsshader_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Material::mutable_vsshader() {
  set_has_vsshader();
  if (vsshader_ == &::google::protobuf::internal::kEmptyString) {
    vsshader_ = new ::std::string;
  }
  return vsshader_;
}
inline ::std::string* Material::release_vsshader() {
  clear_has_vsshader();
  if (vsshader_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vsshader_;
    vsshader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool enable_blend = 9;
inline bool Material::has_enable_blend() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Material::set_has_enable_blend() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Material::clear_has_enable_blend() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Material::clear_enable_blend() {
  enable_blend_ = false;
  clear_has_enable_blend();
}
inline bool Material::enable_blend() const {
  return enable_blend_;
}
inline void Material::set_enable_blend(bool value) {
  set_has_enable_blend();
  enable_blend_ = value;
}

// optional bool enable_program_point_size = 10;
inline bool Material::has_enable_program_point_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Material::set_has_enable_program_point_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Material::clear_has_enable_program_point_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Material::clear_enable_program_point_size() {
  enable_program_point_size_ = false;
  clear_has_enable_program_point_size();
}
inline bool Material::enable_program_point_size() const {
  return enable_program_point_size_;
}
inline void Material::set_enable_program_point_size(bool value) {
  set_has_enable_program_point_size();
  enable_program_point_size_ = value;
}

// optional bool enable_point_sprite = 11;
inline bool Material::has_enable_point_sprite() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Material::set_has_enable_point_sprite() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Material::clear_has_enable_point_sprite() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Material::clear_enable_point_sprite() {
  enable_point_sprite_ = false;
  clear_has_enable_point_sprite();
}
inline bool Material::enable_point_sprite() const {
  return enable_point_sprite_;
}
inline void Material::set_enable_point_sprite(bool value) {
  set_has_enable_point_sprite();
  enable_point_sprite_ = value;
}

// optional .Serializer.standard_lambert_material_param lambert_params = 12;
inline bool Material::has_lambert_params() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Material::set_has_lambert_params() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Material::clear_has_lambert_params() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Material::clear_lambert_params() {
  if (lambert_params_ != NULL) lambert_params_->::Serializer::standard_lambert_material_param::Clear();
  clear_has_lambert_params();
}
inline const ::Serializer::standard_lambert_material_param& Material::lambert_params() const {
  return lambert_params_ != NULL ? *lambert_params_ : *default_instance_->lambert_params_;
}
inline ::Serializer::standard_lambert_material_param* Material::mutable_lambert_params() {
  set_has_lambert_params();
  if (lambert_params_ == NULL) lambert_params_ = new ::Serializer::standard_lambert_material_param;
  return lambert_params_;
}
inline ::Serializer::standard_lambert_material_param* Material::release_lambert_params() {
  clear_has_lambert_params();
  ::Serializer::standard_lambert_material_param* temp = lambert_params_;
  lambert_params_ = NULL;
  return temp;
}

// optional .Serializer.standard_phong_material_param phong_params = 13;
inline bool Material::has_phong_params() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Material::set_has_phong_params() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Material::clear_has_phong_params() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Material::clear_phong_params() {
  if (phong_params_ != NULL) phong_params_->::Serializer::standard_phong_material_param::Clear();
  clear_has_phong_params();
}
inline const ::Serializer::standard_phong_material_param& Material::phong_params() const {
  return phong_params_ != NULL ? *phong_params_ : *default_instance_->phong_params_;
}
inline ::Serializer::standard_phong_material_param* Material::mutable_phong_params() {
  set_has_phong_params();
  if (phong_params_ == NULL) phong_params_ = new ::Serializer::standard_phong_material_param;
  return phong_params_;
}
inline ::Serializer::standard_phong_material_param* Material::release_phong_params() {
  clear_has_phong_params();
  ::Serializer::standard_phong_material_param* temp = phong_params_;
  phong_params_ = NULL;
  return temp;
}

// optional .Serializer.standard_blin_phong_material_param blin_phong_params = 14;
inline bool Material::has_blin_phong_params() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Material::set_has_blin_phong_params() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Material::clear_has_blin_phong_params() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Material::clear_blin_phong_params() {
  if (blin_phong_params_ != NULL) blin_phong_params_->::Serializer::standard_blin_phong_material_param::Clear();
  clear_has_blin_phong_params();
}
inline const ::Serializer::standard_blin_phong_material_param& Material::blin_phong_params() const {
  return blin_phong_params_ != NULL ? *blin_phong_params_ : *default_instance_->blin_phong_params_;
}
inline ::Serializer::standard_blin_phong_material_param* Material::mutable_blin_phong_params() {
  set_has_blin_phong_params();
  if (blin_phong_params_ == NULL) blin_phong_params_ = new ::Serializer::standard_blin_phong_material_param;
  return blin_phong_params_;
}
inline ::Serializer::standard_blin_phong_material_param* Material::release_blin_phong_params() {
  clear_has_blin_phong_params();
  ::Serializer::standard_blin_phong_material_param* temp = blin_phong_params_;
  blin_phong_params_ = NULL;
  return temp;
}

// optional .Serializer.custom_material_param custom_params = 15;
inline bool Material::has_custom_params() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Material::set_has_custom_params() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Material::clear_has_custom_params() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Material::clear_custom_params() {
  if (custom_params_ != NULL) custom_params_->::Serializer::custom_material_param::Clear();
  clear_has_custom_params();
}
inline const ::Serializer::custom_material_param& Material::custom_params() const {
  return custom_params_ != NULL ? *custom_params_ : *default_instance_->custom_params_;
}
inline ::Serializer::custom_material_param* Material::mutable_custom_params() {
  set_has_custom_params();
  if (custom_params_ == NULL) custom_params_ = new ::Serializer::custom_material_param;
  return custom_params_;
}
inline ::Serializer::custom_material_param* Material::release_custom_params() {
  clear_has_custom_params();
  ::Serializer::custom_material_param* temp = custom_params_;
  custom_params_ = NULL;
  return temp;
}

// optional int32 blend_func_src = 16;
inline bool Material::has_blend_func_src() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Material::set_has_blend_func_src() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Material::clear_has_blend_func_src() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Material::clear_blend_func_src() {
  blend_func_src_ = 0;
  clear_has_blend_func_src();
}
inline ::google::protobuf::int32 Material::blend_func_src() const {
  return blend_func_src_;
}
inline void Material::set_blend_func_src(::google::protobuf::int32 value) {
  set_has_blend_func_src();
  blend_func_src_ = value;
}

// optional int32 blend_func_dst = 17;
inline bool Material::has_blend_func_dst() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Material::set_has_blend_func_dst() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Material::clear_has_blend_func_dst() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Material::clear_blend_func_dst() {
  blend_func_dst_ = 0;
  clear_has_blend_func_dst();
}
inline ::google::protobuf::int32 Material::blend_func_dst() const {
  return blend_func_dst_;
}
inline void Material::set_blend_func_dst(::google::protobuf::int32 value) {
  set_has_blend_func_dst();
  blend_func_dst_ = value;
}

// optional .Serializer.builtin_uniform_param builtin_params = 18;
inline bool Material::has_builtin_params() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Material::set_has_builtin_params() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Material::clear_has_builtin_params() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Material::clear_builtin_params() {
  if (builtin_params_ != NULL) builtin_params_->::Serializer::builtin_uniform_param::Clear();
  clear_has_builtin_params();
}
inline const ::Serializer::builtin_uniform_param& Material::builtin_params() const {
  return builtin_params_ != NULL ? *builtin_params_ : *default_instance_->builtin_params_;
}
inline ::Serializer::builtin_uniform_param* Material::mutable_builtin_params() {
  set_has_builtin_params();
  if (builtin_params_ == NULL) builtin_params_ = new ::Serializer::builtin_uniform_param;
  return builtin_params_;
}
inline ::Serializer::builtin_uniform_param* Material::release_builtin_params() {
  clear_has_builtin_params();
  ::Serializer::builtin_uniform_param* temp = builtin_params_;
  builtin_params_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MaterialEx

// optional string name = 1;
inline bool MaterialEx::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaterialEx::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaterialEx::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaterialEx::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MaterialEx::name() const {
  return *name_;
}
inline void MaterialEx::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MaterialEx::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MaterialEx::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaterialEx::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MaterialEx::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Serializer.Texture2DProperty texture2ds = 2;
inline int MaterialEx::texture2ds_size() const {
  return texture2ds_.size();
}
inline void MaterialEx::clear_texture2ds() {
  texture2ds_.Clear();
}
inline const ::Serializer::Texture2DProperty& MaterialEx::texture2ds(int index) const {
  return texture2ds_.Get(index);
}
inline ::Serializer::Texture2DProperty* MaterialEx::mutable_texture2ds(int index) {
  return texture2ds_.Mutable(index);
}
inline ::Serializer::Texture2DProperty* MaterialEx::add_texture2ds() {
  return texture2ds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >&
MaterialEx::texture2ds() const {
  return texture2ds_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::Texture2DProperty >*
MaterialEx::mutable_texture2ds() {
  return &texture2ds_;
}

// repeated .Serializer.TextureCubeProperty texture_cubes = 3;
inline int MaterialEx::texture_cubes_size() const {
  return texture_cubes_.size();
}
inline void MaterialEx::clear_texture_cubes() {
  texture_cubes_.Clear();
}
inline const ::Serializer::TextureCubeProperty& MaterialEx::texture_cubes(int index) const {
  return texture_cubes_.Get(index);
}
inline ::Serializer::TextureCubeProperty* MaterialEx::mutable_texture_cubes(int index) {
  return texture_cubes_.Mutable(index);
}
inline ::Serializer::TextureCubeProperty* MaterialEx::add_texture_cubes() {
  return texture_cubes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::TextureCubeProperty >&
MaterialEx::texture_cubes() const {
  return texture_cubes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::TextureCubeProperty >*
MaterialEx::mutable_texture_cubes() {
  return &texture_cubes_;
}

// repeated .Serializer.Vector4Property vector4s = 4;
inline int MaterialEx::vector4s_size() const {
  return vector4s_.size();
}
inline void MaterialEx::clear_vector4s() {
  vector4s_.Clear();
}
inline const ::Serializer::Vector4Property& MaterialEx::vector4s(int index) const {
  return vector4s_.Get(index);
}
inline ::Serializer::Vector4Property* MaterialEx::mutable_vector4s(int index) {
  return vector4s_.Mutable(index);
}
inline ::Serializer::Vector4Property* MaterialEx::add_vector4s() {
  return vector4s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >&
MaterialEx::vector4s() const {
  return vector4s_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4Property >*
MaterialEx::mutable_vector4s() {
  return &vector4s_;
}

// repeated .Serializer.IntArrayProperty int_array = 5;
inline int MaterialEx::int_array_size() const {
  return int_array_.size();
}
inline void MaterialEx::clear_int_array() {
  int_array_.Clear();
}
inline const ::Serializer::IntArrayProperty& MaterialEx::int_array(int index) const {
  return int_array_.Get(index);
}
inline ::Serializer::IntArrayProperty* MaterialEx::mutable_int_array(int index) {
  return int_array_.Mutable(index);
}
inline ::Serializer::IntArrayProperty* MaterialEx::add_int_array() {
  return int_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::IntArrayProperty >&
MaterialEx::int_array() const {
  return int_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::IntArrayProperty >*
MaterialEx::mutable_int_array() {
  return &int_array_;
}

// repeated .Serializer.Vector4ArrayProperty vector4_array = 6;
inline int MaterialEx::vector4_array_size() const {
  return vector4_array_.size();
}
inline void MaterialEx::clear_vector4_array() {
  vector4_array_.Clear();
}
inline const ::Serializer::Vector4ArrayProperty& MaterialEx::vector4_array(int index) const {
  return vector4_array_.Get(index);
}
inline ::Serializer::Vector4ArrayProperty* MaterialEx::mutable_vector4_array(int index) {
  return vector4_array_.Mutable(index);
}
inline ::Serializer::Vector4ArrayProperty* MaterialEx::add_vector4_array() {
  return vector4_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4ArrayProperty >&
MaterialEx::vector4_array() const {
  return vector4_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::Serializer::Vector4ArrayProperty >*
MaterialEx::mutable_vector4_array() {
  return &vector4_array_;
}

// repeated string mat4s = 7;
inline int MaterialEx::mat4s_size() const {
  return mat4s_.size();
}
inline void MaterialEx::clear_mat4s() {
  mat4s_.Clear();
}
inline const ::std::string& MaterialEx::mat4s(int index) const {
  return mat4s_.Get(index);
}
inline ::std::string* MaterialEx::mutable_mat4s(int index) {
  return mat4s_.Mutable(index);
}
inline void MaterialEx::set_mat4s(int index, const ::std::string& value) {
  mat4s_.Mutable(index)->assign(value);
}
inline void MaterialEx::set_mat4s(int index, const char* value) {
  mat4s_.Mutable(index)->assign(value);
}
inline void MaterialEx::set_mat4s(int index, const char* value, size_t size) {
  mat4s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaterialEx::add_mat4s() {
  return mat4s_.Add();
}
inline void MaterialEx::add_mat4s(const ::std::string& value) {
  mat4s_.Add()->assign(value);
}
inline void MaterialEx::add_mat4s(const char* value) {
  mat4s_.Add()->assign(value);
}
inline void MaterialEx::add_mat4s(const char* value, size_t size) {
  mat4s_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MaterialEx::mat4s() const {
  return mat4s_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MaterialEx::mutable_mat4s() {
  return &mat4s_;
}

// repeated string mat3s = 8;
inline int MaterialEx::mat3s_size() const {
  return mat3s_.size();
}
inline void MaterialEx::clear_mat3s() {
  mat3s_.Clear();
}
inline const ::std::string& MaterialEx::mat3s(int index) const {
  return mat3s_.Get(index);
}
inline ::std::string* MaterialEx::mutable_mat3s(int index) {
  return mat3s_.Mutable(index);
}
inline void MaterialEx::set_mat3s(int index, const ::std::string& value) {
  mat3s_.Mutable(index)->assign(value);
}
inline void MaterialEx::set_mat3s(int index, const char* value) {
  mat3s_.Mutable(index)->assign(value);
}
inline void MaterialEx::set_mat3s(int index, const char* value, size_t size) {
  mat3s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaterialEx::add_mat3s() {
  return mat3s_.Add();
}
inline void MaterialEx::add_mat3s(const ::std::string& value) {
  mat3s_.Add()->assign(value);
}
inline void MaterialEx::add_mat3s(const char* value) {
  mat3s_.Add()->assign(value);
}
inline void MaterialEx::add_mat3s(const char* value, size_t size) {
  mat3s_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MaterialEx::mat3s() const {
  return mat3s_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MaterialEx::mutable_mat3s() {
  return &mat3s_;
}

// repeated int32 blend_func = 9;
inline int MaterialEx::blend_func_size() const {
  return blend_func_.size();
}
inline void MaterialEx::clear_blend_func() {
  blend_func_.Clear();
}
inline ::google::protobuf::int32 MaterialEx::blend_func(int index) const {
  return blend_func_.Get(index);
}
inline void MaterialEx::set_blend_func(int index, ::google::protobuf::int32 value) {
  blend_func_.Set(index, value);
}
inline void MaterialEx::add_blend_func(::google::protobuf::int32 value) {
  blend_func_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MaterialEx::blend_func() const {
  return blend_func_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MaterialEx::mutable_blend_func() {
  return &blend_func_;
}

// optional bool enable_blend = 10;
inline bool MaterialEx::has_enable_blend() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MaterialEx::set_has_enable_blend() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MaterialEx::clear_has_enable_blend() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MaterialEx::clear_enable_blend() {
  enable_blend_ = false;
  clear_has_enable_blend();
}
inline bool MaterialEx::enable_blend() const {
  return enable_blend_;
}
inline void MaterialEx::set_enable_blend(bool value) {
  set_has_enable_blend();
  enable_blend_ = value;
}

// optional bool enable_program_point_size = 11;
inline bool MaterialEx::has_enable_program_point_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MaterialEx::set_has_enable_program_point_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MaterialEx::clear_has_enable_program_point_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MaterialEx::clear_enable_program_point_size() {
  enable_program_point_size_ = false;
  clear_has_enable_program_point_size();
}
inline bool MaterialEx::enable_program_point_size() const {
  return enable_program_point_size_;
}
inline void MaterialEx::set_enable_program_point_size(bool value) {
  set_has_enable_program_point_size();
  enable_program_point_size_ = value;
}

// optional bool enable_point_sprite = 12;
inline bool MaterialEx::has_enable_point_sprite() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MaterialEx::set_has_enable_point_sprite() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MaterialEx::clear_has_enable_point_sprite() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MaterialEx::clear_enable_point_sprite() {
  enable_point_sprite_ = false;
  clear_has_enable_point_sprite();
}
inline bool MaterialEx::enable_point_sprite() const {
  return enable_point_sprite_;
}
inline void MaterialEx::set_enable_point_sprite(bool value) {
  set_has_enable_point_sprite();
  enable_point_sprite_ = value;
}

// optional bool enable_cull_face = 13;
inline bool MaterialEx::has_enable_cull_face() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MaterialEx::set_has_enable_cull_face() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MaterialEx::clear_has_enable_cull_face() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MaterialEx::clear_enable_cull_face() {
  enable_cull_face_ = false;
  clear_has_enable_cull_face();
}
inline bool MaterialEx::enable_cull_face() const {
  return enable_cull_face_;
}
inline void MaterialEx::set_enable_cull_face(bool value) {
  set_has_enable_cull_face();
  enable_cull_face_ = value;
}

// optional int32 cull_face_mode = 14;
inline bool MaterialEx::has_cull_face_mode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MaterialEx::set_has_cull_face_mode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MaterialEx::clear_has_cull_face_mode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MaterialEx::clear_cull_face_mode() {
  cull_face_mode_ = 0;
  clear_has_cull_face_mode();
}
inline ::google::protobuf::int32 MaterialEx::cull_face_mode() const {
  return cull_face_mode_;
}
inline void MaterialEx::set_cull_face_mode(::google::protobuf::int32 value) {
  set_has_cull_face_mode();
  cull_face_mode_ = value;
}

// optional bool enable_depth_test = 15;
inline bool MaterialEx::has_enable_depth_test() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MaterialEx::set_has_enable_depth_test() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MaterialEx::clear_has_enable_depth_test() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MaterialEx::clear_enable_depth_test() {
  enable_depth_test_ = false;
  clear_has_enable_depth_test();
}
inline bool MaterialEx::enable_depth_test() const {
  return enable_depth_test_;
}
inline void MaterialEx::set_enable_depth_test(bool value) {
  set_has_enable_depth_test();
  enable_depth_test_ = value;
}

// optional int32 primitive_type = 16;
inline bool MaterialEx::has_primitive_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MaterialEx::set_has_primitive_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MaterialEx::clear_has_primitive_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MaterialEx::clear_primitive_type() {
  primitive_type_ = 0;
  clear_has_primitive_type();
}
inline ::google::protobuf::int32 MaterialEx::primitive_type() const {
  return primitive_type_;
}
inline void MaterialEx::set_primitive_type(::google::protobuf::int32 value) {
  set_has_primitive_type();
  primitive_type_ = value;
}

// optional string vs_shader = 17;
inline bool MaterialEx::has_vs_shader() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MaterialEx::set_has_vs_shader() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MaterialEx::clear_has_vs_shader() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MaterialEx::clear_vs_shader() {
  if (vs_shader_ != &::google::protobuf::internal::kEmptyString) {
    vs_shader_->clear();
  }
  clear_has_vs_shader();
}
inline const ::std::string& MaterialEx::vs_shader() const {
  return *vs_shader_;
}
inline void MaterialEx::set_vs_shader(const ::std::string& value) {
  set_has_vs_shader();
  if (vs_shader_ == &::google::protobuf::internal::kEmptyString) {
    vs_shader_ = new ::std::string;
  }
  vs_shader_->assign(value);
}
inline void MaterialEx::set_vs_shader(const char* value) {
  set_has_vs_shader();
  if (vs_shader_ == &::google::protobuf::internal::kEmptyString) {
    vs_shader_ = new ::std::string;
  }
  vs_shader_->assign(value);
}
inline void MaterialEx::set_vs_shader(const char* value, size_t size) {
  set_has_vs_shader();
  if (vs_shader_ == &::google::protobuf::internal::kEmptyString) {
    vs_shader_ = new ::std::string;
  }
  vs_shader_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaterialEx::mutable_vs_shader() {
  set_has_vs_shader();
  if (vs_shader_ == &::google::protobuf::internal::kEmptyString) {
    vs_shader_ = new ::std::string;
  }
  return vs_shader_;
}
inline ::std::string* MaterialEx::release_vs_shader() {
  clear_has_vs_shader();
  if (vs_shader_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vs_shader_;
    vs_shader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fs_shader = 18;
inline bool MaterialEx::has_fs_shader() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MaterialEx::set_has_fs_shader() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MaterialEx::clear_has_fs_shader() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MaterialEx::clear_fs_shader() {
  if (fs_shader_ != &::google::protobuf::internal::kEmptyString) {
    fs_shader_->clear();
  }
  clear_has_fs_shader();
}
inline const ::std::string& MaterialEx::fs_shader() const {
  return *fs_shader_;
}
inline void MaterialEx::set_fs_shader(const ::std::string& value) {
  set_has_fs_shader();
  if (fs_shader_ == &::google::protobuf::internal::kEmptyString) {
    fs_shader_ = new ::std::string;
  }
  fs_shader_->assign(value);
}
inline void MaterialEx::set_fs_shader(const char* value) {
  set_has_fs_shader();
  if (fs_shader_ == &::google::protobuf::internal::kEmptyString) {
    fs_shader_ = new ::std::string;
  }
  fs_shader_->assign(value);
}
inline void MaterialEx::set_fs_shader(const char* value, size_t size) {
  set_has_fs_shader();
  if (fs_shader_ == &::google::protobuf::internal::kEmptyString) {
    fs_shader_ = new ::std::string;
  }
  fs_shader_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaterialEx::mutable_fs_shader() {
  set_has_fs_shader();
  if (fs_shader_ == &::google::protobuf::internal::kEmptyString) {
    fs_shader_ = new ::std::string;
  }
  return fs_shader_;
}
inline ::std::string* MaterialEx::release_fs_shader() {
  clear_has_fs_shader();
  if (fs_shader_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fs_shader_;
    fs_shader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Material_2eproto__INCLUDED
