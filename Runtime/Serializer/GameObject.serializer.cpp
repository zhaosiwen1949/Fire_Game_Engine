// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameObject.serializer.h"

#include <algorithm>

#include "once.h"
#include "coded_stream.h"
#include "wire_format_lite_inl.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

void protobuf_ShutdownFile_GameObject_2eproto() {
  delete Transform::default_instance_;
  delete GameObject::default_instance_;
}

void protobuf_AddDesc_GameObject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Serializer::protobuf_AddDesc_ImageSprite_2eproto();
  Transform::default_instance_ = new Transform();
  GameObject::default_instance_ = new GameObject();
  Transform::default_instance_->InitAsDefaultInstance();
  GameObject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameObject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameObject_2eproto {
  StaticDescriptorInitializer_GameObject_2eproto() {
    protobuf_AddDesc_GameObject_2eproto();
  }
} static_descriptor_initializer_GameObject_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Transform::kPositionFieldNumber;
const int Transform::kRotationFieldNumber;
const int Transform::kScaleFieldNumber;
const int Transform::kShearFieldNumber;
const int Transform::kTypeFieldNumber;
#endif  // !_MSC_VER

Transform::Transform()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Transform::InitAsDefaultInstance() {
}

Transform::Transform(const Transform& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Transform::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transform::~Transform() {
  SharedDtor();
}

void Transform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Transform& Transform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameObject_2eproto();  return *default_instance_;
}

Transform* Transform::default_instance_ = NULL;

Transform* Transform::New() const {
  return new Transform;
}

void Transform::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    type_ = 0;
  }
  position_.Clear();
  rotation_.Clear();
  scale_.Clear();
  shear_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_position;
        if (input->ExpectTag(21)) goto parse_rotation;
        break;
      }
      
      // repeated float rotation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_rotation())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotation())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rotation;
        if (input->ExpectTag(29)) goto parse_scale;
        break;
      }
      
      // repeated float scale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_scale())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scale())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_scale;
        if (input->ExpectTag(37)) goto parse_shear;
        break;
      }
      
      // repeated float shear = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_shear())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_shear())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_shear;
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float position = 1;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->position(i), output);
  }
  
  // repeated float rotation = 2;
  for (int i = 0; i < this->rotation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->rotation(i), output);
  }
  
  // repeated float scale = 3;
  for (int i = 0; i < this->scale_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->scale(i), output);
  }
  
  // repeated float shear = 4;
  for (int i = 0; i < this->shear_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->shear(i), output);
  }
  
  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }
  
}

int Transform::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated float position = 1;
  {
    int data_size = 0;
    data_size = 4 * this->position_size();
    total_size += 1 * this->position_size() + data_size;
  }
  
  // repeated float rotation = 2;
  {
    int data_size = 0;
    data_size = 4 * this->rotation_size();
    total_size += 1 * this->rotation_size() + data_size;
  }
  
  // repeated float scale = 3;
  {
    int data_size = 0;
    data_size = 4 * this->scale_size();
    total_size += 1 * this->scale_size() + data_size;
  }
  
  // repeated float shear = 4;
  {
    int data_size = 0;
    data_size = 4 * this->shear_size();
    total_size += 1 * this->shear_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transform*>(&from));
}

void Transform::MergeFrom(const Transform& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  rotation_.MergeFrom(from.rotation_);
  scale_.MergeFrom(from.scale_);
  shear_.MergeFrom(from.shear_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void Transform::CopyFrom(const Transform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  
  return true;
}

void Transform::Swap(Transform* other) {
  if (other != this) {
    position_.Swap(&other->position_);
    rotation_.Swap(&other->rotation_);
    scale_.Swap(&other->scale_);
    shear_.Swap(&other->shear_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Transform::GetTypeName() const {
  return "Serializer.Transform";
}


// ===================================================================

#ifndef _MSC_VER
const int GameObject::kNameFieldNumber;
const int GameObject::kLayerFieldNumber;
const int GameObject::kEnableFieldNumber;
const int GameObject::kTransformFieldNumber;
const int GameObject::kChildFieldNumber;
const int GameObject::kLeftSiblingFieldNumber;
const int GameObject::kRightSiblingFieldNumber;
const int GameObject::kExtraDataFieldNumber;
const int GameObject::kRenderOrderFieldNumber;
const int GameObject::kImageSpriteFieldNumber;
const int GameObject::kImagesprite9FieldNumber;
#endif  // !_MSC_VER

GameObject::GameObject()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GameObject::InitAsDefaultInstance() {
  transform_ = const_cast< ::Serializer::Transform*>(&::Serializer::Transform::default_instance());
  child_ = const_cast< ::Serializer::GameObject*>(&::Serializer::GameObject::default_instance());
  left_sibling_ = const_cast< ::Serializer::GameObject*>(&::Serializer::GameObject::default_instance());
  right_sibling_ = const_cast< ::Serializer::GameObject*>(&::Serializer::GameObject::default_instance());
  imagesprite_ = const_cast< ::Serializer::ImageSprite*>(&::Serializer::ImageSprite::default_instance());
  imagesprite9_ = const_cast< ::Serializer::ImageSprite9*>(&::Serializer::ImageSprite9::default_instance());
}

GameObject::GameObject(const GameObject& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameObject::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  layer_ = 0u;
  enable_ = false;
  transform_ = NULL;
  child_ = NULL;
  left_sibling_ = NULL;
  right_sibling_ = NULL;
  extra_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imagesprite_ = NULL;
  imagesprite9_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameObject::~GameObject() {
  SharedDtor();
}

void GameObject::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_data_;
  }
  if (this != default_instance_) {
    delete transform_;
    delete child_;
    delete left_sibling_;
    delete right_sibling_;
    delete imagesprite_;
    delete imagesprite9_;
  }
}

void GameObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameObject& GameObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameObject_2eproto();  return *default_instance_;
}

GameObject* GameObject::default_instance_ = NULL;

GameObject* GameObject::New() const {
  return new GameObject;
}

void GameObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    layer_ = 0u;
    enable_ = false;
    if (has_transform()) {
      if (transform_ != NULL) transform_->::Serializer::Transform::Clear();
    }
    if (has_child()) {
      if (child_ != NULL) child_->::Serializer::GameObject::Clear();
    }
    if (has_left_sibling()) {
      if (left_sibling_ != NULL) left_sibling_->::Serializer::GameObject::Clear();
    }
    if (has_right_sibling()) {
      if (right_sibling_ != NULL) right_sibling_->::Serializer::GameObject::Clear();
    }
    if (has_extra_data()) {
      if (extra_data_ != &::google::protobuf::internal::kEmptyString) {
        extra_data_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_imagesprite()) {
      if (imagesprite_ != NULL) imagesprite_->::Serializer::ImageSprite::Clear();
    }
    if (has_imagesprite9()) {
      if (imagesprite9_ != NULL) imagesprite9_->::Serializer::ImageSprite9::Clear();
    }
  }
  render_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_layer;
        break;
      }
      
      // optional uint32 layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enable;
        break;
      }
      
      // optional bool enable = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transform;
        break;
      }
      
      // optional .Serializer.Transform transform = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_child;
        break;
      }
      
      // optional .Serializer.GameObject child = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_child()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_left_sibling;
        break;
      }
      
      // optional .Serializer.GameObject left_sibling = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_sibling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_sibling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_right_sibling;
        break;
      }
      
      // optional .Serializer.GameObject right_sibling = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_sibling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_sibling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extra_data;
        break;
      }
      
      // optional bytes extra_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_render_order;
        break;
      }
      
      // repeated string render_order = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_render_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_render_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_render_order;
        if (input->ExpectTag(82)) goto parse_imageSprite;
        break;
      }
      
      // optional .Serializer.ImageSprite imageSprite = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageSprite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagesprite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_imagesprite9;
        break;
      }
      
      // optional .Serializer.ImageSprite9 imagesprite9 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imagesprite9:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagesprite9()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layer(), output);
  }
  
  // optional bool enable = 3;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable(), output);
  }
  
  // optional .Serializer.Transform transform = 4;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->transform(), output);
  }
  
  // optional .Serializer.GameObject child = 5;
  if (has_child()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->child(), output);
  }
  
  // optional .Serializer.GameObject left_sibling = 6;
  if (has_left_sibling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->left_sibling(), output);
  }
  
  // optional .Serializer.GameObject right_sibling = 7;
  if (has_right_sibling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->right_sibling(), output);
  }
  
  // optional bytes extra_data = 8;
  if (has_extra_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->extra_data(), output);
  }
  
  // repeated string render_order = 9;
  for (int i = 0; i < this->render_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->render_order(i), output);
  }
  
  // optional .Serializer.ImageSprite imageSprite = 10;
  if (has_imagesprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->imagesprite(), output);
  }
  
  // optional .Serializer.ImageSprite9 imagesprite9 = 11;
  if (has_imagesprite9()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->imagesprite9(), output);
  }
  
}

int GameObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }
    
    // optional bool enable = 3;
    if (has_enable()) {
      total_size += 1 + 1;
    }
    
    // optional .Serializer.Transform transform = 4;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform());
    }
    
    // optional .Serializer.GameObject child = 5;
    if (has_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->child());
    }
    
    // optional .Serializer.GameObject left_sibling = 6;
    if (has_left_sibling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_sibling());
    }
    
    // optional .Serializer.GameObject right_sibling = 7;
    if (has_right_sibling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_sibling());
    }
    
    // optional bytes extra_data = 8;
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_data());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .Serializer.ImageSprite imageSprite = 10;
    if (has_imagesprite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagesprite());
    }
    
    // optional .Serializer.ImageSprite9 imagesprite9 = 11;
    if (has_imagesprite9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagesprite9());
    }
    
  }
  // repeated string render_order = 9;
  total_size += 1 * this->render_order_size();
  for (int i = 0; i < this->render_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->render_order(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameObject::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameObject*>(&from));
}

void GameObject::MergeFrom(const GameObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  render_order_.MergeFrom(from.render_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_transform()) {
      mutable_transform()->::Serializer::Transform::MergeFrom(from.transform());
    }
    if (from.has_child()) {
      mutable_child()->::Serializer::GameObject::MergeFrom(from.child());
    }
    if (from.has_left_sibling()) {
      mutable_left_sibling()->::Serializer::GameObject::MergeFrom(from.left_sibling());
    }
    if (from.has_right_sibling()) {
      mutable_right_sibling()->::Serializer::GameObject::MergeFrom(from.right_sibling());
    }
    if (from.has_extra_data()) {
      set_extra_data(from.extra_data());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_imagesprite()) {
      mutable_imagesprite()->::Serializer::ImageSprite::MergeFrom(from.imagesprite());
    }
    if (from.has_imagesprite9()) {
      mutable_imagesprite9()->::Serializer::ImageSprite9::MergeFrom(from.imagesprite9());
    }
  }
}

void GameObject::CopyFrom(const GameObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameObject::IsInitialized() const {
  
  if (has_child()) {
    if (!this->child().IsInitialized()) return false;
  }
  if (has_left_sibling()) {
    if (!this->left_sibling().IsInitialized()) return false;
  }
  if (has_right_sibling()) {
    if (!this->right_sibling().IsInitialized()) return false;
  }
  if (has_imagesprite()) {
    if (!this->imagesprite().IsInitialized()) return false;
  }
  if (has_imagesprite9()) {
    if (!this->imagesprite9().IsInitialized()) return false;
  }
  return true;
}

void GameObject::Swap(GameObject* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(layer_, other->layer_);
    std::swap(enable_, other->enable_);
    std::swap(transform_, other->transform_);
    std::swap(child_, other->child_);
    std::swap(left_sibling_, other->left_sibling_);
    std::swap(right_sibling_, other->right_sibling_);
    std::swap(extra_data_, other->extra_data_);
    render_order_.Swap(&other->render_order_);
    std::swap(imagesprite_, other->imagesprite_);
    std::swap(imagesprite9_, other->imagesprite9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameObject::GetTypeName() const {
  return "Serializer.GameObject";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)
