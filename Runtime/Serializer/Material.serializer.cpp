// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Material.serializer.h"

#include <algorithm>

#include "once.h"
#include "coded_stream.h"
#include "wire_format_lite_inl.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

void protobuf_ShutdownFile_Material_2eproto() {
  delete Texture2DProperty::default_instance_;
  delete TextureCubeProperty::default_instance_;
  delete Vector4Property::default_instance_;
  delete IntArrayProperty::default_instance_;
  delete Vector4ArrayProperty::default_instance_;
  delete standard_lambert_material_param::default_instance_;
  delete standard_phong_material_param::default_instance_;
  delete standard_blin_phong_material_param::default_instance_;
  delete custom_material_param::default_instance_;
  delete builtin_uniform_param::default_instance_;
  delete Material::default_instance_;
  delete MaterialEx::default_instance_;
}

void protobuf_AddDesc_Material_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Serializer::protobuf_AddDesc_Vector_2eproto();
  ::Serializer::protobuf_AddDesc_TextureAtlas_2eproto();
  ::Serializer::protobuf_AddDesc_GLSL_2eproto();
  Texture2DProperty::default_instance_ = new Texture2DProperty();
  TextureCubeProperty::default_instance_ = new TextureCubeProperty();
  Vector4Property::default_instance_ = new Vector4Property();
  IntArrayProperty::default_instance_ = new IntArrayProperty();
  Vector4ArrayProperty::default_instance_ = new Vector4ArrayProperty();
  standard_lambert_material_param::default_instance_ = new standard_lambert_material_param();
  standard_phong_material_param::default_instance_ = new standard_phong_material_param();
  standard_blin_phong_material_param::default_instance_ = new standard_blin_phong_material_param();
  custom_material_param::default_instance_ = new custom_material_param();
  builtin_uniform_param::default_instance_ = new builtin_uniform_param();
  Material::default_instance_ = new Material();
  MaterialEx::default_instance_ = new MaterialEx();
  Texture2DProperty::default_instance_->InitAsDefaultInstance();
  TextureCubeProperty::default_instance_->InitAsDefaultInstance();
  Vector4Property::default_instance_->InitAsDefaultInstance();
  IntArrayProperty::default_instance_->InitAsDefaultInstance();
  Vector4ArrayProperty::default_instance_->InitAsDefaultInstance();
  standard_lambert_material_param::default_instance_->InitAsDefaultInstance();
  standard_phong_material_param::default_instance_->InitAsDefaultInstance();
  standard_blin_phong_material_param::default_instance_->InitAsDefaultInstance();
  custom_material_param::default_instance_->InitAsDefaultInstance();
  builtin_uniform_param::default_instance_->InitAsDefaultInstance();
  Material::default_instance_->InitAsDefaultInstance();
  MaterialEx::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Material_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Material_2eproto {
  StaticDescriptorInitializer_Material_2eproto() {
    protobuf_AddDesc_Material_2eproto();
  }
} static_descriptor_initializer_Material_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Texture2DProperty::kNameFieldNumber;
const int Texture2DProperty::kImageFieldNumber;
#endif  // !_MSC_VER

Texture2DProperty::Texture2DProperty()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Texture2DProperty::InitAsDefaultInstance() {
}

Texture2DProperty::Texture2DProperty(const Texture2DProperty& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Texture2DProperty::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Texture2DProperty::~Texture2DProperty() {
  SharedDtor();
}

void Texture2DProperty::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void Texture2DProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Texture2DProperty& Texture2DProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

Texture2DProperty* Texture2DProperty::default_instance_ = NULL;

Texture2DProperty* Texture2DProperty::New() const {
  return new Texture2DProperty;
}

void Texture2DProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Texture2DProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }
      
      // optional string image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Texture2DProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->image(), output);
  }
  
}

int Texture2DProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Texture2DProperty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Texture2DProperty*>(&from));
}

void Texture2DProperty::MergeFrom(const Texture2DProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
  }
}

void Texture2DProperty::CopyFrom(const Texture2DProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Texture2DProperty::IsInitialized() const {
  
  return true;
}

void Texture2DProperty::Swap(Texture2DProperty* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Texture2DProperty::GetTypeName() const {
  return "Serializer.Texture2DProperty";
}


// ===================================================================

#ifndef _MSC_VER
const int TextureCubeProperty::kNameFieldNumber;
const int TextureCubeProperty::kImageFieldNumber;
#endif  // !_MSC_VER

TextureCubeProperty::TextureCubeProperty()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TextureCubeProperty::InitAsDefaultInstance() {
}

TextureCubeProperty::TextureCubeProperty(const TextureCubeProperty& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TextureCubeProperty::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextureCubeProperty::~TextureCubeProperty() {
  SharedDtor();
}

void TextureCubeProperty::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void TextureCubeProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextureCubeProperty& TextureCubeProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

TextureCubeProperty* TextureCubeProperty::default_instance_ = NULL;

TextureCubeProperty* TextureCubeProperty::New() const {
  return new TextureCubeProperty;
}

void TextureCubeProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TextureCubeProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }
      
      // optional string image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextureCubeProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->image(), output);
  }
  
}

int TextureCubeProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextureCubeProperty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextureCubeProperty*>(&from));
}

void TextureCubeProperty::MergeFrom(const TextureCubeProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
  }
}

void TextureCubeProperty::CopyFrom(const TextureCubeProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureCubeProperty::IsInitialized() const {
  
  return true;
}

void TextureCubeProperty::Swap(TextureCubeProperty* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TextureCubeProperty::GetTypeName() const {
  return "Serializer.TextureCubeProperty";
}


// ===================================================================

#ifndef _MSC_VER
const int Vector4Property::kNameFieldNumber;
const int Vector4Property::kValueFieldNumber;
#endif  // !_MSC_VER

Vector4Property::Vector4Property()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Vector4Property::InitAsDefaultInstance() {
}

Vector4Property::Vector4Property(const Vector4Property& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Vector4Property::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector4Property::~Vector4Property() {
  SharedDtor();
}

void Vector4Property::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Vector4Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Vector4Property& Vector4Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

Vector4Property* Vector4Property::default_instance_ = NULL;

Vector4Property* Vector4Property::New() const {
  return new Vector4Property;
}

void Vector4Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Vector4Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }
      
      // repeated float value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector4Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated float value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->value(i), output);
  }
  
}

int Vector4Property::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated float value = 2;
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4Property::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Vector4Property*>(&from));
}

void Vector4Property::MergeFrom(const Vector4Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void Vector4Property::CopyFrom(const Vector4Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4Property::IsInitialized() const {
  
  return true;
}

void Vector4Property::Swap(Vector4Property* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Vector4Property::GetTypeName() const {
  return "Serializer.Vector4Property";
}


// ===================================================================

#ifndef _MSC_VER
const int IntArrayProperty::kNameFieldNumber;
const int IntArrayProperty::kValueFieldNumber;
#endif  // !_MSC_VER

IntArrayProperty::IntArrayProperty()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void IntArrayProperty::InitAsDefaultInstance() {
}

IntArrayProperty::IntArrayProperty(const IntArrayProperty& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void IntArrayProperty::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntArrayProperty::~IntArrayProperty() {
  SharedDtor();
}

void IntArrayProperty::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IntArrayProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IntArrayProperty& IntArrayProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

IntArrayProperty* IntArrayProperty::default_instance_ = NULL;

IntArrayProperty* IntArrayProperty::New() const {
  return new IntArrayProperty;
}

void IntArrayProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool IntArrayProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // repeated int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntArrayProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated int32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->value(i), output);
  }
  
}

int IntArrayProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated int32 value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntArrayProperty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IntArrayProperty*>(&from));
}

void IntArrayProperty::MergeFrom(const IntArrayProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void IntArrayProperty::CopyFrom(const IntArrayProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntArrayProperty::IsInitialized() const {
  
  return true;
}

void IntArrayProperty::Swap(IntArrayProperty* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IntArrayProperty::GetTypeName() const {
  return "Serializer.IntArrayProperty";
}


// ===================================================================

#ifndef _MSC_VER
const int Vector4ArrayProperty::kNameFieldNumber;
const int Vector4ArrayProperty::kValueFieldNumber;
#endif  // !_MSC_VER

Vector4ArrayProperty::Vector4ArrayProperty()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Vector4ArrayProperty::InitAsDefaultInstance() {
}

Vector4ArrayProperty::Vector4ArrayProperty(const Vector4ArrayProperty& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Vector4ArrayProperty::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector4ArrayProperty::~Vector4ArrayProperty() {
  SharedDtor();
}

void Vector4ArrayProperty::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Vector4ArrayProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Vector4ArrayProperty& Vector4ArrayProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

Vector4ArrayProperty* Vector4ArrayProperty::default_instance_ = NULL;

Vector4ArrayProperty* Vector4ArrayProperty::New() const {
  return new Vector4ArrayProperty;
}

void Vector4ArrayProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Vector4ArrayProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // repeated .Serializer.Vector4f value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector4ArrayProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .Serializer.Vector4f value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->value(i), output);
  }
  
}

int Vector4ArrayProperty::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .Serializer.Vector4f value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4ArrayProperty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Vector4ArrayProperty*>(&from));
}

void Vector4ArrayProperty::MergeFrom(const Vector4ArrayProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void Vector4ArrayProperty::CopyFrom(const Vector4ArrayProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4ArrayProperty::IsInitialized() const {
  
  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).IsInitialized()) return false;
  }
  return true;
}

void Vector4ArrayProperty::Swap(Vector4ArrayProperty* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Vector4ArrayProperty::GetTypeName() const {
  return "Serializer.Vector4ArrayProperty";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

standard_lambert_material_param::standard_lambert_material_param()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void standard_lambert_material_param::InitAsDefaultInstance() {
}

standard_lambert_material_param::standard_lambert_material_param(const standard_lambert_material_param& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void standard_lambert_material_param::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

standard_lambert_material_param::~standard_lambert_material_param() {
  SharedDtor();
}

void standard_lambert_material_param::SharedDtor() {
  if (this != default_instance_) {
  }
}

void standard_lambert_material_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const standard_lambert_material_param& standard_lambert_material_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

standard_lambert_material_param* standard_lambert_material_param::default_instance_ = NULL;

standard_lambert_material_param* standard_lambert_material_param::New() const {
  return new standard_lambert_material_param;
}

void standard_lambert_material_param::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool standard_lambert_material_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void standard_lambert_material_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int standard_lambert_material_param::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void standard_lambert_material_param::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const standard_lambert_material_param*>(&from));
}

void standard_lambert_material_param::MergeFrom(const standard_lambert_material_param& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void standard_lambert_material_param::CopyFrom(const standard_lambert_material_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool standard_lambert_material_param::IsInitialized() const {
  
  return true;
}

void standard_lambert_material_param::Swap(standard_lambert_material_param* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string standard_lambert_material_param::GetTypeName() const {
  return "Serializer.standard_lambert_material_param";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

standard_phong_material_param::standard_phong_material_param()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void standard_phong_material_param::InitAsDefaultInstance() {
}

standard_phong_material_param::standard_phong_material_param(const standard_phong_material_param& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void standard_phong_material_param::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

standard_phong_material_param::~standard_phong_material_param() {
  SharedDtor();
}

void standard_phong_material_param::SharedDtor() {
  if (this != default_instance_) {
  }
}

void standard_phong_material_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const standard_phong_material_param& standard_phong_material_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

standard_phong_material_param* standard_phong_material_param::default_instance_ = NULL;

standard_phong_material_param* standard_phong_material_param::New() const {
  return new standard_phong_material_param;
}

void standard_phong_material_param::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool standard_phong_material_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void standard_phong_material_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int standard_phong_material_param::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void standard_phong_material_param::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const standard_phong_material_param*>(&from));
}

void standard_phong_material_param::MergeFrom(const standard_phong_material_param& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void standard_phong_material_param::CopyFrom(const standard_phong_material_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool standard_phong_material_param::IsInitialized() const {
  
  return true;
}

void standard_phong_material_param::Swap(standard_phong_material_param* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string standard_phong_material_param::GetTypeName() const {
  return "Serializer.standard_phong_material_param";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

standard_blin_phong_material_param::standard_blin_phong_material_param()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void standard_blin_phong_material_param::InitAsDefaultInstance() {
}

standard_blin_phong_material_param::standard_blin_phong_material_param(const standard_blin_phong_material_param& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void standard_blin_phong_material_param::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

standard_blin_phong_material_param::~standard_blin_phong_material_param() {
  SharedDtor();
}

void standard_blin_phong_material_param::SharedDtor() {
  if (this != default_instance_) {
  }
}

void standard_blin_phong_material_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const standard_blin_phong_material_param& standard_blin_phong_material_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

standard_blin_phong_material_param* standard_blin_phong_material_param::default_instance_ = NULL;

standard_blin_phong_material_param* standard_blin_phong_material_param::New() const {
  return new standard_blin_phong_material_param;
}

void standard_blin_phong_material_param::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool standard_blin_phong_material_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void standard_blin_phong_material_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int standard_blin_phong_material_param::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void standard_blin_phong_material_param::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const standard_blin_phong_material_param*>(&from));
}

void standard_blin_phong_material_param::MergeFrom(const standard_blin_phong_material_param& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void standard_blin_phong_material_param::CopyFrom(const standard_blin_phong_material_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool standard_blin_phong_material_param::IsInitialized() const {
  
  return true;
}

void standard_blin_phong_material_param::Swap(standard_blin_phong_material_param* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string standard_blin_phong_material_param::GetTypeName() const {
  return "Serializer.standard_blin_phong_material_param";
}


// ===================================================================

#ifndef _MSC_VER
const int custom_material_param::kSampler2DsFieldNumber;
const int custom_material_param::kVec4SFieldNumber;
#endif  // !_MSC_VER

custom_material_param::custom_material_param()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void custom_material_param::InitAsDefaultInstance() {
}

custom_material_param::custom_material_param(const custom_material_param& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void custom_material_param::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

custom_material_param::~custom_material_param() {
  SharedDtor();
}

void custom_material_param::SharedDtor() {
  if (this != default_instance_) {
  }
}

void custom_material_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const custom_material_param& custom_material_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

custom_material_param* custom_material_param::default_instance_ = NULL;

custom_material_param* custom_material_param::New() const {
  return new custom_material_param;
}

void custom_material_param::Clear() {
  sampler2ds_.Clear();
  vec4s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool custom_material_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Serializer.Texture2DProperty sampler2ds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sampler2ds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sampler2ds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sampler2ds;
        if (input->ExpectTag(18)) goto parse_vec4s;
        break;
      }
      
      // repeated .Serializer.Vector4Property vec4s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vec4s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vec4s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vec4s;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void custom_material_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Serializer.Texture2DProperty sampler2ds = 1;
  for (int i = 0; i < this->sampler2ds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sampler2ds(i), output);
  }
  
  // repeated .Serializer.Vector4Property vec4s = 2;
  for (int i = 0; i < this->vec4s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->vec4s(i), output);
  }
  
}

int custom_material_param::ByteSize() const {
  int total_size = 0;
  
  // repeated .Serializer.Texture2DProperty sampler2ds = 1;
  total_size += 1 * this->sampler2ds_size();
  for (int i = 0; i < this->sampler2ds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sampler2ds(i));
  }
  
  // repeated .Serializer.Vector4Property vec4s = 2;
  total_size += 1 * this->vec4s_size();
  for (int i = 0; i < this->vec4s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vec4s(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void custom_material_param::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const custom_material_param*>(&from));
}

void custom_material_param::MergeFrom(const custom_material_param& from) {
  GOOGLE_CHECK_NE(&from, this);
  sampler2ds_.MergeFrom(from.sampler2ds_);
  vec4s_.MergeFrom(from.vec4s_);
}

void custom_material_param::CopyFrom(const custom_material_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool custom_material_param::IsInitialized() const {
  
  return true;
}

void custom_material_param::Swap(custom_material_param* other) {
  if (other != this) {
    sampler2ds_.Swap(&other->sampler2ds_);
    vec4s_.Swap(&other->vec4s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string custom_material_param::GetTypeName() const {
  return "Serializer.custom_material_param";
}


// ===================================================================

#ifndef _MSC_VER
const int builtin_uniform_param::kUniformsFieldNumber;
#endif  // !_MSC_VER

builtin_uniform_param::builtin_uniform_param()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void builtin_uniform_param::InitAsDefaultInstance() {
}

builtin_uniform_param::builtin_uniform_param(const builtin_uniform_param& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void builtin_uniform_param::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

builtin_uniform_param::~builtin_uniform_param() {
  SharedDtor();
}

void builtin_uniform_param::SharedDtor() {
  if (this != default_instance_) {
  }
}

void builtin_uniform_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const builtin_uniform_param& builtin_uniform_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

builtin_uniform_param* builtin_uniform_param::default_instance_ = NULL;

builtin_uniform_param* builtin_uniform_param::New() const {
  return new builtin_uniform_param;
}

void builtin_uniform_param::Clear() {
  uniforms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool builtin_uniform_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Serializer.UniformDefine uniforms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniforms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uniforms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_uniforms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void builtin_uniform_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Serializer.UniformDefine uniforms = 1;
  for (int i = 0; i < this->uniforms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->uniforms(i), output);
  }
  
}

int builtin_uniform_param::ByteSize() const {
  int total_size = 0;
  
  // repeated .Serializer.UniformDefine uniforms = 1;
  total_size += 1 * this->uniforms_size();
  for (int i = 0; i < this->uniforms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uniforms(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void builtin_uniform_param::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const builtin_uniform_param*>(&from));
}

void builtin_uniform_param::MergeFrom(const builtin_uniform_param& from) {
  GOOGLE_CHECK_NE(&from, this);
  uniforms_.MergeFrom(from.uniforms_);
}

void builtin_uniform_param::CopyFrom(const builtin_uniform_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool builtin_uniform_param::IsInitialized() const {
  
  return true;
}

void builtin_uniform_param::Swap(builtin_uniform_param* other) {
  if (other != this) {
    uniforms_.Swap(&other->uniforms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string builtin_uniform_param::GetTypeName() const {
  return "Serializer.builtin_uniform_param";
}


// ===================================================================

#ifndef _MSC_VER
const int Material::kPathFieldNumber;
const int Material::kShaderFieldNumber;
const int Material::kMSampler2DPropertiesDesperatedFieldNumber;
const int Material::kMVector4FPropertiesDesperatedFieldNumber;
const int Material::kUseAtlasFieldNumber;
const int Material::kLwtShaderFieldNumber;
const int Material::kSpritesFieldNumber;
const int Material::kVsshaderFieldNumber;
const int Material::kEnableBlendFieldNumber;
const int Material::kEnableProgramPointSizeFieldNumber;
const int Material::kEnablePointSpriteFieldNumber;
const int Material::kLambertParamsFieldNumber;
const int Material::kPhongParamsFieldNumber;
const int Material::kBlinPhongParamsFieldNumber;
const int Material::kCustomParamsFieldNumber;
const int Material::kBlendFuncSrcFieldNumber;
const int Material::kBlendFuncDstFieldNumber;
const int Material::kBuiltinParamsFieldNumber;
#endif  // !_MSC_VER

Material::Material()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Material::InitAsDefaultInstance() {
  lambert_params_ = const_cast< ::Serializer::standard_lambert_material_param*>(&::Serializer::standard_lambert_material_param::default_instance());
  phong_params_ = const_cast< ::Serializer::standard_phong_material_param*>(&::Serializer::standard_phong_material_param::default_instance());
  blin_phong_params_ = const_cast< ::Serializer::standard_blin_phong_material_param*>(&::Serializer::standard_blin_phong_material_param::default_instance());
  custom_params_ = const_cast< ::Serializer::custom_material_param*>(&::Serializer::custom_material_param::default_instance());
  builtin_params_ = const_cast< ::Serializer::builtin_uniform_param*>(&::Serializer::builtin_uniform_param::default_instance());
}

Material::Material(const Material& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Material::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useatlas_ = false;
  lwt_shader_ = GOOGLE_ULONGLONG(0);
  vsshader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enable_blend_ = false;
  enable_program_point_size_ = false;
  enable_point_sprite_ = false;
  lambert_params_ = NULL;
  phong_params_ = NULL;
  blin_phong_params_ = NULL;
  custom_params_ = NULL;
  blend_func_src_ = 0;
  blend_func_dst_ = 0;
  builtin_params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material::~Material() {
  SharedDtor();
}

void Material::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (shader_ != &::google::protobuf::internal::kEmptyString) {
    delete shader_;
  }
  if (vsshader_ != &::google::protobuf::internal::kEmptyString) {
    delete vsshader_;
  }
  if (this != default_instance_) {
    delete lambert_params_;
    delete phong_params_;
    delete blin_phong_params_;
    delete custom_params_;
    delete builtin_params_;
  }
}

void Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Material& Material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

Material* Material::default_instance_ = NULL;

Material* Material::New() const {
  return new Material;
}

void Material::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_shader()) {
      if (shader_ != &::google::protobuf::internal::kEmptyString) {
        shader_->clear();
      }
    }
    useatlas_ = false;
    lwt_shader_ = GOOGLE_ULONGLONG(0);
    if (has_vsshader()) {
      if (vsshader_ != &::google::protobuf::internal::kEmptyString) {
        vsshader_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    enable_blend_ = false;
    enable_program_point_size_ = false;
    enable_point_sprite_ = false;
    if (has_lambert_params()) {
      if (lambert_params_ != NULL) lambert_params_->::Serializer::standard_lambert_material_param::Clear();
    }
    if (has_phong_params()) {
      if (phong_params_ != NULL) phong_params_->::Serializer::standard_phong_material_param::Clear();
    }
    if (has_blin_phong_params()) {
      if (blin_phong_params_ != NULL) blin_phong_params_->::Serializer::standard_blin_phong_material_param::Clear();
    }
    if (has_custom_params()) {
      if (custom_params_ != NULL) custom_params_->::Serializer::custom_material_param::Clear();
    }
    blend_func_src_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    blend_func_dst_ = 0;
    if (has_builtin_params()) {
      if (builtin_params_ != NULL) builtin_params_->::Serializer::builtin_uniform_param::Clear();
    }
  }
  msampler2dproperties_desperated_.Clear();
  mvector4fproperties_desperated_.Clear();
  sprites_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shader;
        break;
      }
      
      // optional string shader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mSampler2DProperties_desperated;
        break;
      }
      
      // repeated .Serializer.Texture2DProperty mSampler2DProperties_desperated = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mSampler2DProperties_desperated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msampler2dproperties_desperated()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mSampler2DProperties_desperated;
        if (input->ExpectTag(34)) goto parse_mVector4fProperties_desperated;
        break;
      }
      
      // repeated .Serializer.Vector4Property mVector4fProperties_desperated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mVector4fProperties_desperated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mvector4fproperties_desperated()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mVector4fProperties_desperated;
        if (input->ExpectTag(40)) goto parse_useAtlas;
        break;
      }
      
      // optional bool useAtlas = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useAtlas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useatlas_)));
          set_has_useatlas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_lwt_shader;
        break;
      }
      
      // optional fixed64 lwt_shader = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lwt_shader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lwt_shader_)));
          set_has_lwt_shader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sprites;
        break;
      }
      
      // repeated .Serializer.ImageTile sprites = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sprites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sprites()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sprites;
        if (input->ExpectTag(66)) goto parse_vsshader;
        break;
      }
      
      // optional string vsshader = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vsshader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vsshader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_enable_blend;
        break;
      }
      
      // optional bool enable_blend = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_blend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_blend_)));
          set_has_enable_blend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_enable_program_point_size;
        break;
      }
      
      // optional bool enable_program_point_size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_program_point_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_program_point_size_)));
          set_has_enable_program_point_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_enable_point_sprite;
        break;
      }
      
      // optional bool enable_point_sprite = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_point_sprite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_point_sprite_)));
          set_has_enable_point_sprite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_lambert_params;
        break;
      }
      
      // optional .Serializer.standard_lambert_material_param lambert_params = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lambert_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lambert_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_phong_params;
        break;
      }
      
      // optional .Serializer.standard_phong_material_param phong_params = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phong_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phong_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_blin_phong_params;
        break;
      }
      
      // optional .Serializer.standard_blin_phong_material_param blin_phong_params = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blin_phong_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blin_phong_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_custom_params;
        break;
      }
      
      // optional .Serializer.custom_material_param custom_params = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_blend_func_src;
        break;
      }
      
      // optional int32 blend_func_src = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blend_func_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blend_func_src_)));
          set_has_blend_func_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_blend_func_dst;
        break;
      }
      
      // optional int32 blend_func_dst = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blend_func_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blend_func_dst_)));
          set_has_blend_func_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_builtin_params;
        break;
      }
      
      // optional .Serializer.builtin_uniform_param builtin_params = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_builtin_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_builtin_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // optional string shader = 2;
  if (has_shader()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shader(), output);
  }
  
  // repeated .Serializer.Texture2DProperty mSampler2DProperties_desperated = 3;
  for (int i = 0; i < this->msampler2dproperties_desperated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->msampler2dproperties_desperated(i), output);
  }
  
  // repeated .Serializer.Vector4Property mVector4fProperties_desperated = 4;
  for (int i = 0; i < this->mvector4fproperties_desperated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->mvector4fproperties_desperated(i), output);
  }
  
  // optional bool useAtlas = 5;
  if (has_useatlas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->useatlas(), output);
  }
  
  // optional fixed64 lwt_shader = 6;
  if (has_lwt_shader()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->lwt_shader(), output);
  }
  
  // repeated .Serializer.ImageTile sprites = 7;
  for (int i = 0; i < this->sprites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->sprites(i), output);
  }
  
  // optional string vsshader = 8;
  if (has_vsshader()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->vsshader(), output);
  }
  
  // optional bool enable_blend = 9;
  if (has_enable_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_blend(), output);
  }
  
  // optional bool enable_program_point_size = 10;
  if (has_enable_program_point_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_program_point_size(), output);
  }
  
  // optional bool enable_point_sprite = 11;
  if (has_enable_point_sprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_point_sprite(), output);
  }
  
  // optional .Serializer.standard_lambert_material_param lambert_params = 12;
  if (has_lambert_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->lambert_params(), output);
  }
  
  // optional .Serializer.standard_phong_material_param phong_params = 13;
  if (has_phong_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->phong_params(), output);
  }
  
  // optional .Serializer.standard_blin_phong_material_param blin_phong_params = 14;
  if (has_blin_phong_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->blin_phong_params(), output);
  }
  
  // optional .Serializer.custom_material_param custom_params = 15;
  if (has_custom_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->custom_params(), output);
  }
  
  // optional int32 blend_func_src = 16;
  if (has_blend_func_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->blend_func_src(), output);
  }
  
  // optional int32 blend_func_dst = 17;
  if (has_blend_func_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->blend_func_dst(), output);
  }
  
  // optional .Serializer.builtin_uniform_param builtin_params = 18;
  if (has_builtin_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->builtin_params(), output);
  }
  
}

int Material::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional string shader = 2;
    if (has_shader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shader());
    }
    
    // optional bool useAtlas = 5;
    if (has_useatlas()) {
      total_size += 1 + 1;
    }
    
    // optional fixed64 lwt_shader = 6;
    if (has_lwt_shader()) {
      total_size += 1 + 8;
    }
    
    // optional string vsshader = 8;
    if (has_vsshader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vsshader());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool enable_blend = 9;
    if (has_enable_blend()) {
      total_size += 1 + 1;
    }
    
    // optional bool enable_program_point_size = 10;
    if (has_enable_program_point_size()) {
      total_size += 1 + 1;
    }
    
    // optional bool enable_point_sprite = 11;
    if (has_enable_point_sprite()) {
      total_size += 1 + 1;
    }
    
    // optional .Serializer.standard_lambert_material_param lambert_params = 12;
    if (has_lambert_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lambert_params());
    }
    
    // optional .Serializer.standard_phong_material_param phong_params = 13;
    if (has_phong_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phong_params());
    }
    
    // optional .Serializer.standard_blin_phong_material_param blin_phong_params = 14;
    if (has_blin_phong_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blin_phong_params());
    }
    
    // optional .Serializer.custom_material_param custom_params = 15;
    if (has_custom_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_params());
    }
    
    // optional int32 blend_func_src = 16;
    if (has_blend_func_src()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blend_func_src());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 blend_func_dst = 17;
    if (has_blend_func_dst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blend_func_dst());
    }
    
    // optional .Serializer.builtin_uniform_param builtin_params = 18;
    if (has_builtin_params()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->builtin_params());
    }
    
  }
  // repeated .Serializer.Texture2DProperty mSampler2DProperties_desperated = 3;
  total_size += 1 * this->msampler2dproperties_desperated_size();
  for (int i = 0; i < this->msampler2dproperties_desperated_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msampler2dproperties_desperated(i));
  }
  
  // repeated .Serializer.Vector4Property mVector4fProperties_desperated = 4;
  total_size += 1 * this->mvector4fproperties_desperated_size();
  for (int i = 0; i < this->mvector4fproperties_desperated_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mvector4fproperties_desperated(i));
  }
  
  // repeated .Serializer.ImageTile sprites = 7;
  total_size += 1 * this->sprites_size();
  for (int i = 0; i < this->sprites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sprites(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Material*>(&from));
}

void Material::MergeFrom(const Material& from) {
  GOOGLE_CHECK_NE(&from, this);
  msampler2dproperties_desperated_.MergeFrom(from.msampler2dproperties_desperated_);
  mvector4fproperties_desperated_.MergeFrom(from.mvector4fproperties_desperated_);
  sprites_.MergeFrom(from.sprites_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_shader()) {
      set_shader(from.shader());
    }
    if (from.has_useatlas()) {
      set_useatlas(from.useatlas());
    }
    if (from.has_lwt_shader()) {
      set_lwt_shader(from.lwt_shader());
    }
    if (from.has_vsshader()) {
      set_vsshader(from.vsshader());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enable_blend()) {
      set_enable_blend(from.enable_blend());
    }
    if (from.has_enable_program_point_size()) {
      set_enable_program_point_size(from.enable_program_point_size());
    }
    if (from.has_enable_point_sprite()) {
      set_enable_point_sprite(from.enable_point_sprite());
    }
    if (from.has_lambert_params()) {
      mutable_lambert_params()->::Serializer::standard_lambert_material_param::MergeFrom(from.lambert_params());
    }
    if (from.has_phong_params()) {
      mutable_phong_params()->::Serializer::standard_phong_material_param::MergeFrom(from.phong_params());
    }
    if (from.has_blin_phong_params()) {
      mutable_blin_phong_params()->::Serializer::standard_blin_phong_material_param::MergeFrom(from.blin_phong_params());
    }
    if (from.has_custom_params()) {
      mutable_custom_params()->::Serializer::custom_material_param::MergeFrom(from.custom_params());
    }
    if (from.has_blend_func_src()) {
      set_blend_func_src(from.blend_func_src());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_blend_func_dst()) {
      set_blend_func_dst(from.blend_func_dst());
    }
    if (from.has_builtin_params()) {
      mutable_builtin_params()->::Serializer::builtin_uniform_param::MergeFrom(from.builtin_params());
    }
  }
}

void Material::CopyFrom(const Material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  
  return true;
}

void Material::Swap(Material* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(shader_, other->shader_);
    msampler2dproperties_desperated_.Swap(&other->msampler2dproperties_desperated_);
    mvector4fproperties_desperated_.Swap(&other->mvector4fproperties_desperated_);
    std::swap(useatlas_, other->useatlas_);
    std::swap(lwt_shader_, other->lwt_shader_);
    sprites_.Swap(&other->sprites_);
    std::swap(vsshader_, other->vsshader_);
    std::swap(enable_blend_, other->enable_blend_);
    std::swap(enable_program_point_size_, other->enable_program_point_size_);
    std::swap(enable_point_sprite_, other->enable_point_sprite_);
    std::swap(lambert_params_, other->lambert_params_);
    std::swap(phong_params_, other->phong_params_);
    std::swap(blin_phong_params_, other->blin_phong_params_);
    std::swap(custom_params_, other->custom_params_);
    std::swap(blend_func_src_, other->blend_func_src_);
    std::swap(blend_func_dst_, other->blend_func_dst_);
    std::swap(builtin_params_, other->builtin_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Material::GetTypeName() const {
  return "Serializer.Material";
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialEx::kNameFieldNumber;
const int MaterialEx::kTexture2DsFieldNumber;
const int MaterialEx::kTextureCubesFieldNumber;
const int MaterialEx::kVector4SFieldNumber;
const int MaterialEx::kIntArrayFieldNumber;
const int MaterialEx::kVector4ArrayFieldNumber;
const int MaterialEx::kMat4SFieldNumber;
const int MaterialEx::kMat3SFieldNumber;
const int MaterialEx::kBlendFuncFieldNumber;
const int MaterialEx::kEnableBlendFieldNumber;
const int MaterialEx::kEnableProgramPointSizeFieldNumber;
const int MaterialEx::kEnablePointSpriteFieldNumber;
const int MaterialEx::kEnableCullFaceFieldNumber;
const int MaterialEx::kCullFaceModeFieldNumber;
const int MaterialEx::kEnableDepthTestFieldNumber;
const int MaterialEx::kPrimitiveTypeFieldNumber;
const int MaterialEx::kVsShaderFieldNumber;
const int MaterialEx::kFsShaderFieldNumber;
#endif  // !_MSC_VER

MaterialEx::MaterialEx()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MaterialEx::InitAsDefaultInstance() {
}

MaterialEx::MaterialEx(const MaterialEx& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MaterialEx::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enable_blend_ = false;
  enable_program_point_size_ = false;
  enable_point_sprite_ = false;
  enable_cull_face_ = false;
  cull_face_mode_ = 0;
  enable_depth_test_ = false;
  primitive_type_ = 0;
  vs_shader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fs_shader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialEx::~MaterialEx() {
  SharedDtor();
}

void MaterialEx::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (vs_shader_ != &::google::protobuf::internal::kEmptyString) {
    delete vs_shader_;
  }
  if (fs_shader_ != &::google::protobuf::internal::kEmptyString) {
    delete fs_shader_;
  }
  if (this != default_instance_) {
  }
}

void MaterialEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MaterialEx& MaterialEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();  return *default_instance_;
}

MaterialEx* MaterialEx::default_instance_ = NULL;

MaterialEx* MaterialEx::New() const {
  return new MaterialEx;
}

void MaterialEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    enable_blend_ = false;
    enable_program_point_size_ = false;
    enable_point_sprite_ = false;
    enable_cull_face_ = false;
    cull_face_mode_ = 0;
    enable_depth_test_ = false;
    primitive_type_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_vs_shader()) {
      if (vs_shader_ != &::google::protobuf::internal::kEmptyString) {
        vs_shader_->clear();
      }
    }
    if (has_fs_shader()) {
      if (fs_shader_ != &::google::protobuf::internal::kEmptyString) {
        fs_shader_->clear();
      }
    }
  }
  texture2ds_.Clear();
  texture_cubes_.Clear();
  vector4s_.Clear();
  int_array_.Clear();
  vector4_array_.Clear();
  mat4s_.Clear();
  mat3s_.Clear();
  blend_func_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MaterialEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_texture2ds;
        break;
      }
      
      // repeated .Serializer.Texture2DProperty texture2ds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texture2ds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_texture2ds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_texture2ds;
        if (input->ExpectTag(26)) goto parse_texture_cubes;
        break;
      }
      
      // repeated .Serializer.TextureCubeProperty texture_cubes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texture_cubes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_texture_cubes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_texture_cubes;
        if (input->ExpectTag(34)) goto parse_vector4s;
        break;
      }
      
      // repeated .Serializer.Vector4Property vector4s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector4s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector4s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vector4s;
        if (input->ExpectTag(42)) goto parse_int_array;
        break;
      }
      
      // repeated .Serializer.IntArrayProperty int_array = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_int_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_int_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_int_array;
        if (input->ExpectTag(50)) goto parse_vector4_array;
        break;
      }
      
      // repeated .Serializer.Vector4ArrayProperty vector4_array = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector4_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector4_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vector4_array;
        if (input->ExpectTag(58)) goto parse_mat4s;
        break;
      }
      
      // repeated string mat4s = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mat4s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mat4s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mat4s;
        if (input->ExpectTag(66)) goto parse_mat3s;
        break;
      }
      
      // repeated string mat3s = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mat3s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mat3s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mat3s;
        if (input->ExpectTag(72)) goto parse_blend_func;
        break;
      }
      
      // repeated int32 blend_func = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blend_func:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_blend_func())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_blend_func())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_blend_func;
        if (input->ExpectTag(80)) goto parse_enable_blend;
        break;
      }
      
      // optional bool enable_blend = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_blend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_blend_)));
          set_has_enable_blend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_enable_program_point_size;
        break;
      }
      
      // optional bool enable_program_point_size = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_program_point_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_program_point_size_)));
          set_has_enable_program_point_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_enable_point_sprite;
        break;
      }
      
      // optional bool enable_point_sprite = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_point_sprite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_point_sprite_)));
          set_has_enable_point_sprite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_enable_cull_face;
        break;
      }
      
      // optional bool enable_cull_face = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_cull_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_cull_face_)));
          set_has_enable_cull_face();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_cull_face_mode;
        break;
      }
      
      // optional int32 cull_face_mode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cull_face_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cull_face_mode_)));
          set_has_cull_face_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_enable_depth_test;
        break;
      }
      
      // optional bool enable_depth_test = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_depth_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_depth_test_)));
          set_has_enable_depth_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_primitive_type;
        break;
      }
      
      // optional int32 primitive_type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_primitive_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primitive_type_)));
          set_has_primitive_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_vs_shader;
        break;
      }
      
      // optional string vs_shader = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vs_shader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vs_shader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_fs_shader;
        break;
      }
      
      // optional string fs_shader = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fs_shader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fs_shader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaterialEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .Serializer.Texture2DProperty texture2ds = 2;
  for (int i = 0; i < this->texture2ds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->texture2ds(i), output);
  }
  
  // repeated .Serializer.TextureCubeProperty texture_cubes = 3;
  for (int i = 0; i < this->texture_cubes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->texture_cubes(i), output);
  }
  
  // repeated .Serializer.Vector4Property vector4s = 4;
  for (int i = 0; i < this->vector4s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->vector4s(i), output);
  }
  
  // repeated .Serializer.IntArrayProperty int_array = 5;
  for (int i = 0; i < this->int_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->int_array(i), output);
  }
  
  // repeated .Serializer.Vector4ArrayProperty vector4_array = 6;
  for (int i = 0; i < this->vector4_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->vector4_array(i), output);
  }
  
  // repeated string mat4s = 7;
  for (int i = 0; i < this->mat4s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mat4s(i), output);
  }
  
  // repeated string mat3s = 8;
  for (int i = 0; i < this->mat3s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mat3s(i), output);
  }
  
  // repeated int32 blend_func = 9;
  for (int i = 0; i < this->blend_func_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->blend_func(i), output);
  }
  
  // optional bool enable_blend = 10;
  if (has_enable_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_blend(), output);
  }
  
  // optional bool enable_program_point_size = 11;
  if (has_enable_program_point_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_program_point_size(), output);
  }
  
  // optional bool enable_point_sprite = 12;
  if (has_enable_point_sprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->enable_point_sprite(), output);
  }
  
  // optional bool enable_cull_face = 13;
  if (has_enable_cull_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->enable_cull_face(), output);
  }
  
  // optional int32 cull_face_mode = 14;
  if (has_cull_face_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cull_face_mode(), output);
  }
  
  // optional bool enable_depth_test = 15;
  if (has_enable_depth_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->enable_depth_test(), output);
  }
  
  // optional int32 primitive_type = 16;
  if (has_primitive_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->primitive_type(), output);
  }
  
  // optional string vs_shader = 17;
  if (has_vs_shader()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->vs_shader(), output);
  }
  
  // optional string fs_shader = 18;
  if (has_fs_shader()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->fs_shader(), output);
  }
  
}

int MaterialEx::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool enable_blend = 10;
    if (has_enable_blend()) {
      total_size += 1 + 1;
    }
    
    // optional bool enable_program_point_size = 11;
    if (has_enable_program_point_size()) {
      total_size += 1 + 1;
    }
    
    // optional bool enable_point_sprite = 12;
    if (has_enable_point_sprite()) {
      total_size += 1 + 1;
    }
    
    // optional bool enable_cull_face = 13;
    if (has_enable_cull_face()) {
      total_size += 1 + 1;
    }
    
    // optional int32 cull_face_mode = 14;
    if (has_cull_face_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cull_face_mode());
    }
    
    // optional bool enable_depth_test = 15;
    if (has_enable_depth_test()) {
      total_size += 1 + 1;
    }
    
    // optional int32 primitive_type = 16;
    if (has_primitive_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primitive_type());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string vs_shader = 17;
    if (has_vs_shader()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vs_shader());
    }
    
    // optional string fs_shader = 18;
    if (has_fs_shader()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fs_shader());
    }
    
  }
  // repeated .Serializer.Texture2DProperty texture2ds = 2;
  total_size += 1 * this->texture2ds_size();
  for (int i = 0; i < this->texture2ds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->texture2ds(i));
  }
  
  // repeated .Serializer.TextureCubeProperty texture_cubes = 3;
  total_size += 1 * this->texture_cubes_size();
  for (int i = 0; i < this->texture_cubes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->texture_cubes(i));
  }
  
  // repeated .Serializer.Vector4Property vector4s = 4;
  total_size += 1 * this->vector4s_size();
  for (int i = 0; i < this->vector4s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector4s(i));
  }
  
  // repeated .Serializer.IntArrayProperty int_array = 5;
  total_size += 1 * this->int_array_size();
  for (int i = 0; i < this->int_array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->int_array(i));
  }
  
  // repeated .Serializer.Vector4ArrayProperty vector4_array = 6;
  total_size += 1 * this->vector4_array_size();
  for (int i = 0; i < this->vector4_array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector4_array(i));
  }
  
  // repeated string mat4s = 7;
  total_size += 1 * this->mat4s_size();
  for (int i = 0; i < this->mat4s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mat4s(i));
  }
  
  // repeated string mat3s = 8;
  total_size += 1 * this->mat3s_size();
  for (int i = 0; i < this->mat3s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mat3s(i));
  }
  
  // repeated int32 blend_func = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->blend_func_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->blend_func(i));
    }
    total_size += 1 * this->blend_func_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialEx::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MaterialEx*>(&from));
}

void MaterialEx::MergeFrom(const MaterialEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  texture2ds_.MergeFrom(from.texture2ds_);
  texture_cubes_.MergeFrom(from.texture_cubes_);
  vector4s_.MergeFrom(from.vector4s_);
  int_array_.MergeFrom(from.int_array_);
  vector4_array_.MergeFrom(from.vector4_array_);
  mat4s_.MergeFrom(from.mat4s_);
  mat3s_.MergeFrom(from.mat3s_);
  blend_func_.MergeFrom(from.blend_func_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_enable_blend()) {
      set_enable_blend(from.enable_blend());
    }
    if (from.has_enable_program_point_size()) {
      set_enable_program_point_size(from.enable_program_point_size());
    }
    if (from.has_enable_point_sprite()) {
      set_enable_point_sprite(from.enable_point_sprite());
    }
    if (from.has_enable_cull_face()) {
      set_enable_cull_face(from.enable_cull_face());
    }
    if (from.has_cull_face_mode()) {
      set_cull_face_mode(from.cull_face_mode());
    }
    if (from.has_enable_depth_test()) {
      set_enable_depth_test(from.enable_depth_test());
    }
    if (from.has_primitive_type()) {
      set_primitive_type(from.primitive_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vs_shader()) {
      set_vs_shader(from.vs_shader());
    }
    if (from.has_fs_shader()) {
      set_fs_shader(from.fs_shader());
    }
  }
}

void MaterialEx::CopyFrom(const MaterialEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialEx::IsInitialized() const {
  
  for (int i = 0; i < vector4_array_size(); i++) {
    if (!this->vector4_array(i).IsInitialized()) return false;
  }
  return true;
}

void MaterialEx::Swap(MaterialEx* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    texture2ds_.Swap(&other->texture2ds_);
    texture_cubes_.Swap(&other->texture_cubes_);
    vector4s_.Swap(&other->vector4s_);
    int_array_.Swap(&other->int_array_);
    vector4_array_.Swap(&other->vector4_array_);
    mat4s_.Swap(&other->mat4s_);
    mat3s_.Swap(&other->mat3s_);
    blend_func_.Swap(&other->blend_func_);
    std::swap(enable_blend_, other->enable_blend_);
    std::swap(enable_program_point_size_, other->enable_program_point_size_);
    std::swap(enable_point_sprite_, other->enable_point_sprite_);
    std::swap(enable_cull_face_, other->enable_cull_face_);
    std::swap(cull_face_mode_, other->cull_face_mode_);
    std::swap(enable_depth_test_, other->enable_depth_test_);
    std::swap(primitive_type_, other->primitive_type_);
    std::swap(vs_shader_, other->vs_shader_);
    std::swap(fs_shader_, other->fs_shader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MaterialEx::GetTypeName() const {
  return "Serializer.MaterialEx";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)
