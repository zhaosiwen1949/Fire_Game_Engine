// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WindowsPlayer.serializer.h"

#include <algorithm>

#include "once.h"
#include "coded_stream.h"
#include "wire_format_lite_inl.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

void protobuf_ShutdownFile_WindowsPlayer_2eproto() {
  delete WinPlayerSize::default_instance_;
  delete WinPlayerSettings::default_instance_;
}

void protobuf_AddDesc_WindowsPlayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  WinPlayerSize::default_instance_ = new WinPlayerSize();
  WinPlayerSettings::default_instance_ = new WinPlayerSettings();
  WinPlayerSize::default_instance_->InitAsDefaultInstance();
  WinPlayerSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WindowsPlayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WindowsPlayer_2eproto {
  StaticDescriptorInitializer_WindowsPlayer_2eproto() {
    protobuf_AddDesc_WindowsPlayer_2eproto();
  }
} static_descriptor_initializer_WindowsPlayer_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int WinPlayerSize::kWidthFieldNumber;
const int WinPlayerSize::kHeightFieldNumber;
#endif  // !_MSC_VER

WinPlayerSize::WinPlayerSize()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WinPlayerSize::InitAsDefaultInstance() {
}

WinPlayerSize::WinPlayerSize(const WinPlayerSize& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WinPlayerSize::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WinPlayerSize::~WinPlayerSize() {
  SharedDtor();
}

void WinPlayerSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WinPlayerSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WinPlayerSize& WinPlayerSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WindowsPlayer_2eproto();  return *default_instance_;
}

WinPlayerSize* WinPlayerSize::default_instance_ = NULL;

WinPlayerSize* WinPlayerSize::New() const {
  return new WinPlayerSize;
}

void WinPlayerSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WinPlayerSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }
      
      // optional int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WinPlayerSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }
  
  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }
  
}

int WinPlayerSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinPlayerSize::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WinPlayerSize*>(&from));
}

void WinPlayerSize::MergeFrom(const WinPlayerSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
}

void WinPlayerSize::CopyFrom(const WinPlayerSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinPlayerSize::IsInitialized() const {
  
  return true;
}

void WinPlayerSize::Swap(WinPlayerSize* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WinPlayerSize::GetTypeName() const {
  return "Serializer.WinPlayerSize";
}


// ===================================================================

#ifndef _MSC_VER
const int WinPlayerSettings::kPredefinedResolutionFieldNumber;
#endif  // !_MSC_VER

WinPlayerSettings::WinPlayerSettings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WinPlayerSettings::InitAsDefaultInstance() {
}

WinPlayerSettings::WinPlayerSettings(const WinPlayerSettings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WinPlayerSettings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WinPlayerSettings::~WinPlayerSettings() {
  SharedDtor();
}

void WinPlayerSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WinPlayerSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WinPlayerSettings& WinPlayerSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WindowsPlayer_2eproto();  return *default_instance_;
}

WinPlayerSettings* WinPlayerSettings::default_instance_ = NULL;

WinPlayerSettings* WinPlayerSettings::New() const {
  return new WinPlayerSettings;
}

void WinPlayerSettings::Clear() {
  predefined_resolution_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WinPlayerSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Serializer.WinPlayerSize predefined_resolution = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predefined_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predefined_resolution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_predefined_resolution;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WinPlayerSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Serializer.WinPlayerSize predefined_resolution = 1;
  for (int i = 0; i < this->predefined_resolution_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->predefined_resolution(i), output);
  }
  
}

int WinPlayerSettings::ByteSize() const {
  int total_size = 0;
  
  // repeated .Serializer.WinPlayerSize predefined_resolution = 1;
  total_size += 1 * this->predefined_resolution_size();
  for (int i = 0; i < this->predefined_resolution_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->predefined_resolution(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinPlayerSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WinPlayerSettings*>(&from));
}

void WinPlayerSettings::MergeFrom(const WinPlayerSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  predefined_resolution_.MergeFrom(from.predefined_resolution_);
}

void WinPlayerSettings::CopyFrom(const WinPlayerSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinPlayerSettings::IsInitialized() const {
  
  return true;
}

void WinPlayerSettings::Swap(WinPlayerSettings* other) {
  if (other != this) {
    predefined_resolution_.Swap(&other->predefined_resolution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WinPlayerSettings::GetTypeName() const {
  return "Serializer.WinPlayerSettings";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)
