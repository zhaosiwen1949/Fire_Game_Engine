// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mesh.proto

#ifndef PROTOBUF_Mesh_2eproto__INCLUDED
#define PROTOBUF_Mesh_2eproto__INCLUDED

#include <string>

#include "common.h"

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "generated_message_util.h"
#include "repeated_field.h"
#include "extension_set.h"
// @@protoc_insertion_point(includes)

namespace Serializer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Mesh_2eproto();
void protobuf_AssignDesc_Mesh_2eproto();
void protobuf_ShutdownFile_Mesh_2eproto();

class Mesh;

// ===================================================================

class Mesh : public ::google::protobuf::MessageLite {
 public:
  Mesh();
  virtual ~Mesh();
  
  Mesh(const Mesh& from);
  
  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Mesh& default_instance();
  
  void Swap(Mesh* other);
  
  // implements Message ----------------------------------------------
  
  Mesh* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Mesh& from);
  void MergeFrom(const Mesh& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 vertexCount = 1;
  inline bool has_vertexcount() const;
  inline void clear_vertexcount();
  static const int kVertexCountFieldNumber = 1;
  inline ::google::protobuf::int32 vertexcount() const;
  inline void set_vertexcount(::google::protobuf::int32 value);
  
  // optional bytes vertexBuffer = 2;
  inline bool has_vertexbuffer() const;
  inline void clear_vertexbuffer();
  static const int kVertexBufferFieldNumber = 2;
  inline const ::std::string& vertexbuffer() const;
  inline void set_vertexbuffer(const ::std::string& value);
  inline void set_vertexbuffer(const char* value);
  inline void set_vertexbuffer(const void* value, size_t size);
  inline ::std::string* mutable_vertexbuffer();
  inline ::std::string* release_vertexbuffer();
  
  // optional int32 indexCount = 3;
  inline bool has_indexcount() const;
  inline void clear_indexcount();
  static const int kIndexCountFieldNumber = 3;
  inline ::google::protobuf::int32 indexcount() const;
  inline void set_indexcount(::google::protobuf::int32 value);
  
  // optional bytes indexBuffer = 4;
  inline bool has_indexbuffer() const;
  inline void clear_indexbuffer();
  static const int kIndexBufferFieldNumber = 4;
  inline const ::std::string& indexbuffer() const;
  inline void set_indexbuffer(const ::std::string& value);
  inline void set_indexbuffer(const char* value);
  inline void set_indexbuffer(const void* value, size_t size);
  inline ::std::string* mutable_indexbuffer();
  inline ::std::string* release_indexbuffer();
  
  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:Serializer.Mesh)
 private:
  inline void set_has_vertexcount();
  inline void clear_has_vertexcount();
  inline void set_has_vertexbuffer();
  inline void clear_has_vertexbuffer();
  inline void set_has_indexcount();
  inline void clear_has_indexcount();
  inline void set_has_indexbuffer();
  inline void clear_has_indexbuffer();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::std::string* vertexbuffer_;
  ::google::protobuf::int32 vertexcount_;
  ::google::protobuf::int32 indexcount_;
  ::std::string* indexbuffer_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Mesh_2eproto();
  friend void protobuf_AssignDesc_Mesh_2eproto();
  friend void protobuf_ShutdownFile_Mesh_2eproto();
  
  void InitAsDefaultInstance();
  static Mesh* default_instance_;
};
// ===================================================================


// ===================================================================

// Mesh

// optional int32 vertexCount = 1;
inline bool Mesh::has_vertexcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mesh::set_has_vertexcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mesh::clear_has_vertexcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mesh::clear_vertexcount() {
  vertexcount_ = 0;
  clear_has_vertexcount();
}
inline ::google::protobuf::int32 Mesh::vertexcount() const {
  return vertexcount_;
}
inline void Mesh::set_vertexcount(::google::protobuf::int32 value) {
  set_has_vertexcount();
  vertexcount_ = value;
}

// optional bytes vertexBuffer = 2;
inline bool Mesh::has_vertexbuffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mesh::set_has_vertexbuffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mesh::clear_has_vertexbuffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mesh::clear_vertexbuffer() {
  if (vertexbuffer_ != &::google::protobuf::internal::kEmptyString) {
    vertexbuffer_->clear();
  }
  clear_has_vertexbuffer();
}
inline const ::std::string& Mesh::vertexbuffer() const {
  return *vertexbuffer_;
}
inline void Mesh::set_vertexbuffer(const ::std::string& value) {
  set_has_vertexbuffer();
  if (vertexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    vertexbuffer_ = new ::std::string;
  }
  vertexbuffer_->assign(value);
}
inline void Mesh::set_vertexbuffer(const char* value) {
  set_has_vertexbuffer();
  if (vertexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    vertexbuffer_ = new ::std::string;
  }
  vertexbuffer_->assign(value);
}
inline void Mesh::set_vertexbuffer(const void* value, size_t size) {
  set_has_vertexbuffer();
  if (vertexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    vertexbuffer_ = new ::std::string;
  }
  vertexbuffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mesh::mutable_vertexbuffer() {
  set_has_vertexbuffer();
  if (vertexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    vertexbuffer_ = new ::std::string;
  }
  return vertexbuffer_;
}
inline ::std::string* Mesh::release_vertexbuffer() {
  clear_has_vertexbuffer();
  if (vertexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vertexbuffer_;
    vertexbuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 indexCount = 3;
inline bool Mesh::has_indexcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mesh::set_has_indexcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mesh::clear_has_indexcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mesh::clear_indexcount() {
  indexcount_ = 0;
  clear_has_indexcount();
}
inline ::google::protobuf::int32 Mesh::indexcount() const {
  return indexcount_;
}
inline void Mesh::set_indexcount(::google::protobuf::int32 value) {
  set_has_indexcount();
  indexcount_ = value;
}

// optional bytes indexBuffer = 4;
inline bool Mesh::has_indexbuffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mesh::set_has_indexbuffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mesh::clear_has_indexbuffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mesh::clear_indexbuffer() {
  if (indexbuffer_ != &::google::protobuf::internal::kEmptyString) {
    indexbuffer_->clear();
  }
  clear_has_indexbuffer();
}
inline const ::std::string& Mesh::indexbuffer() const {
  return *indexbuffer_;
}
inline void Mesh::set_indexbuffer(const ::std::string& value) {
  set_has_indexbuffer();
  if (indexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    indexbuffer_ = new ::std::string;
  }
  indexbuffer_->assign(value);
}
inline void Mesh::set_indexbuffer(const char* value) {
  set_has_indexbuffer();
  if (indexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    indexbuffer_ = new ::std::string;
  }
  indexbuffer_->assign(value);
}
inline void Mesh::set_indexbuffer(const void* value, size_t size) {
  set_has_indexbuffer();
  if (indexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    indexbuffer_ = new ::std::string;
  }
  indexbuffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mesh::mutable_indexbuffer() {
  set_has_indexbuffer();
  if (indexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    indexbuffer_ = new ::std::string;
  }
  return indexbuffer_;
}
inline ::std::string* Mesh::release_indexbuffer() {
  clear_has_indexbuffer();
  if (indexbuffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = indexbuffer_;
    indexbuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 5;
inline bool Mesh::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mesh::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mesh::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mesh::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Mesh::name() const {
  return *name_;
}
inline void Mesh::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Mesh::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Mesh::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mesh::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Mesh::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Mesh_2eproto__INCLUDED
